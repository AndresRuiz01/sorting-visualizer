{"ast":null,"code":"// function mergeArrays(a, b) {\n//     const c = []\n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n//     return c\n// }\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\nfunction merge(array, start, half, end) {\n  var leftPosition = start;\n  var rightPosition = start + half + 1;\n\n  while (rightPosition <= end) {\n    if (array[leftPosition].props.value < array[rightPosition].props.value) {\n      leftPosition++;\n    } else {\n      // Shift right and insert element\n      // Grab element\n      const movedElement = array.splice(rightPosition, 1); // Place in new position\n\n      array.splice(leftPosition, 0, movedElement);\n      leftPosition++;\n      rightPosition++;\n    }\n  }\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n  const half = Math.floor((endIndex - startIndex) / 2);\n\n  if (endIndex - startIndex < 2) {\n    return array;\n  }\n\n  const left_animations = mergeSort(array, startIndex, startIndex + half);\n  const right_animations = mergeSort(array, startIndex + half + 1, endIndex);\n  const merge_animations = merge(array, startIndex, half, endIndex);\n  return [...left_animations, ...right_animations, ...merge_animations];\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/merge_sort.js"],"names":["merge","array","start","half","end","leftPosition","rightPosition","props","value","movedElement","splice","mergeSort","startIndex","endIndex","Math","floor","left_animations","right_animations","merge_animations"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,GAAnC,EAAwC;AACpC,MAAIC,YAAY,GAAGH,KAAnB;AACA,MAAII,aAAa,GAAGJ,KAAK,GAAGC,IAAR,GAAe,CAAnC;;AACA,SAAOG,aAAa,IAAIF,GAAxB,EAA6B;AACzB,QAAIH,KAAK,CAACI,YAAD,CAAL,CAAoBE,KAApB,CAA0BC,KAA1B,GAAkCP,KAAK,CAACK,aAAD,CAAL,CAAqBC,KAArB,CAA2BC,KAAjE,EAAwE;AACpEH,MAAAA,YAAY;AACf,KAFD,MAEO;AACH;AACA;AACA,YAAMI,YAAY,GAAGR,KAAK,CAACS,MAAN,CAAaJ,aAAb,EAA4B,CAA5B,CAArB,CAHG,CAIH;;AACAL,MAAAA,KAAK,CAACS,MAAN,CAAaL,YAAb,EAA2B,CAA3B,EAA8BI,YAA9B;AACAJ,MAAAA,YAAY;AACZC,MAAAA,aAAa;AAChB;AACJ;AACJ;;AAED,SAASK,SAAT,CAAmBV,KAAnB,EAA0BW,UAA1B,EAAsCC,QAAtC,EAAgD;AAC5C,QAAMV,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAW,CAACF,QAAQ,GAAGD,UAAZ,IAA0B,CAArC,CAAb;;AAEA,MAAKC,QAAQ,GAAGD,UAAZ,GAA0B,CAA9B,EAAiC;AAC7B,WAAOX,KAAP;AACH;;AAED,QAAMe,eAAe,GAAGL,SAAS,CAACV,KAAD,EAAQW,UAAR,EAAoBA,UAAU,GAAGT,IAAjC,CAAjC;AACA,QAAMc,gBAAgB,GAAGN,SAAS,CAACV,KAAD,EAAQW,UAAU,GAAGT,IAAb,GAAoB,CAA5B,EAA+BU,QAA/B,CAAlC;AACA,QAAMK,gBAAgB,GAAGlB,KAAK,CAACC,KAAD,EAAQW,UAAR,EAAoBT,IAApB,EAA0BU,QAA1B,CAA9B;AAEA,SAAO,CAAC,GAAGG,eAAJ,EAAqB,GAAGC,gBAAxB,EAA0C,GAAGC,gBAA7C,CAAP;AAEH;;AAED,eAAeP,SAAf","sourcesContent":["// function mergeArrays(a, b) {\n//     const c = []\n  \n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n  \n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n  \n//     return c\n// }\n\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\n\nfunction merge(array, start, half, end) {\n    var leftPosition = start;\n    var rightPosition = start + half + 1;\n    while (rightPosition <= end) {\n        if (array[leftPosition].props.value < array[rightPosition].props.value) {\n            leftPosition++;\n        } else {\n            // Shift right and insert element\n            // Grab element\n            const movedElement = array.splice(rightPosition, 1)\n            // Place in new position\n            array.splice(leftPosition, 0, movedElement);\n            leftPosition++;\n            rightPosition++;\n        }\n    }\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n    const half = Math.floor((endIndex - startIndex) / 2);\n\n    if ((endIndex - startIndex) < 2) {\n        return array;\n    }\n\n    const left_animations = mergeSort(array, startIndex, startIndex + half);\n    const right_animations = mergeSort(array, startIndex + half + 1, endIndex)\n    const merge_animations = merge(array, startIndex, half, endIndex)\n\n    return [...left_animations, ...right_animations, ...merge_animations];\n\n}\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}