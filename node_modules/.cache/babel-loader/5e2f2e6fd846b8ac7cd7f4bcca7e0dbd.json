{"ast":null,"code":"/*\nBubble Sort Description:\n\nIterate over the array comparing two elements that are next to each other. If the first is greater than the second, swap the two elements and continue.\nAfter that iteration, the largest element will be at the end of the array. Iterate over the array again (not needing to check the last spot) and this \nwill put the second largest in the second spot. Continue this process until 1. There are no swaps performed in an iteration (sorted array) or \n2. The final iteration comparing the first two elements occures.  \n\n*/\nexport default function getBubbleSortAnimations(array) {\n  // Animations array stores a list of animations for the visualizer\n  var animations = []; // Bubble sort algorithm\n\n  for (let i = 0; i < array.length; i++) {\n    // var swapped = false;\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Selection animation\n      animations.push([\"check\", j, j + 1]); // Get the heights (values) of the elements\n\n      var heightOne = array[j].props.element_height;\n      var heightTwo = array[j + 1].props.element_height;\n\n      if (heightOne > heightTwo) {\n        // Incorrect location animation\n        animations.push([\"swap-wrong\", j, j + 1]); // Swap elements animation\n\n        animations.push([\"swap-right\", j, j + 1]);\n        var temp = array[j];\n        array[j] = array[j + 1]; // array[j+1] = temp;\n        // swapped = true;\n      } // Return back to origional color animation\n\n\n      animations.push([\"uncheck\", j, j + 1]);\n    } // if (!swapped) {\n    //     break;\n    // }\n\n  }\n\n  console.log(array);\n  return animations;\n}","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/bubble_sort.js"],"names":["getBubbleSortAnimations","array","animations","i","length","j","push","heightOne","props","element_height","heightTwo","temp","console","log"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AACnD;AACA,MAAIC,UAAU,GAAG,EAAjB,CAFmD,CAInD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,MAAN,GAAeD,CAAf,GAAmB,CAAvC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,OAAD,EAAUD,CAAV,EAAaA,CAAC,GAAC,CAAf,CAAhB,EAF2C,CAI3C;;AACA,UAAIE,SAAS,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASG,KAAT,CAAeC,cAA/B;AACA,UAAIC,SAAS,GAAGT,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,CAAWG,KAAX,CAAiBC,cAAjC;;AACA,UAAKF,SAAS,GAAGG,SAAjB,EAA6B;AACzB;AACAR,QAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,YAAD,EAAeD,CAAf,EAAkBA,CAAC,GAAC,CAApB,CAAhB,EAFyB,CAGzB;;AACAH,QAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,YAAD,EAAeD,CAAf,EAAkBA,CAAC,GAAC,CAApB,CAAhB;AACA,YAAIM,IAAI,GAAGV,KAAK,CAACI,CAAD,CAAhB;AACAJ,QAAAA,KAAK,CAACI,CAAD,CAAL,GAAWJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAhB,CANyB,CAOzB;AACA;AACH,OAhB0C,CAiB3C;;;AACAH,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,SAAD,EAAYD,CAAZ,EAAeA,CAAC,GAAC,CAAjB,CAAhB;AACH,KArBkC,CAuBnC;AACA;AACA;;AAEH;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACA,SAAOC,UAAP;AACH","sourcesContent":["\n/*\nBubble Sort Description:\n\nIterate over the array comparing two elements that are next to each other. If the first is greater than the second, swap the two elements and continue.\nAfter that iteration, the largest element will be at the end of the array. Iterate over the array again (not needing to check the last spot) and this \nwill put the second largest in the second spot. Continue this process until 1. There are no swaps performed in an iteration (sorted array) or \n2. The final iteration comparing the first two elements occures.  \n\n*/\nexport default function getBubbleSortAnimations(array) {\n    // Animations array stores a list of animations for the visualizer\n    var animations = [];\n\n    // Bubble sort algorithm\n    for (let i = 0; i < array.length; i++) {\n        // var swapped = false;\n        for (let j = 0; j < array.length - i - 1; j++) {\n            // Selection animation\n            animations.push([\"check\", j, j+1]);\n\n            // Get the heights (values) of the elements\n            var heightOne = array[j].props.element_height;\n            var heightTwo = array[j+1].props.element_height;\n            if ( heightOne > heightTwo ) {\n                // Incorrect location animation\n                animations.push([\"swap-wrong\", j, j+1]);\n                // Swap elements animation\n                animations.push([\"swap-right\", j, j+1]);\n                var temp = array[j]\n                array[j] = array[j+1];\n                // array[j+1] = temp;\n                // swapped = true;\n            }\n            // Return back to origional color animation\n            animations.push([\"uncheck\", j, j+1]);\n        }\n\n        // if (!swapped) {\n        //     break;\n        // }\n\n    }\n    console.log(array);\n    return animations;\n}\n"]},"metadata":{},"sourceType":"module"}