{"ast":null,"code":"function swap(arr, indexOne, indexTwo) {\n  var temp = arr[indexOne];\n  arr[indexOne] = arr[indexTwo];\n  arr[indexTwo] = temp;\n}\n\nfunction selectionSort(array) {\n  var i, j, min_idx; // One by one move boundary of unsorted subarray\n\n  for (i = 0; i < array.length - 1; i++) {\n    // Find the minimum element in unsorted array\n    min_idx = i;\n\n    for (j = i + 1; j < array.length; j++) {\n      if (array[j] < array[min_idx]) {\n        min_idx = j;\n      }\n    } // Swap the found minimum element with the first element\n\n\n    swap(array, min_idx, i);\n  }\n}\n\nexport default selectionSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/selectionSort.js"],"names":["swap","arr","indexOne","indexTwo","temp","selectionSort","array","i","j","min_idx","length"],"mappings":"AAAA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,QAAnB,EAA6BC,QAA7B,EACA;AACI,MAAIC,IAAI,GAAGH,GAAG,CAACC,QAAD,CAAd;AACAD,EAAAA,GAAG,CAACC,QAAD,CAAH,GAAgBD,GAAG,CAACE,QAAD,CAAnB;AACAF,EAAAA,GAAG,CAACE,QAAD,CAAH,GAAgBC,IAAhB;AACH;;AAED,SAASC,aAAT,CAAuBC,KAAvB,EACA;AACI,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,OAAV,CADJ,CAGI;;AACA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAK,CAACI,MAAN,GAAe,CAA/B,EAAkCH,CAAC,EAAnC,EACA;AACI;AACAE,IAAAA,OAAO,GAAGF,CAAV;;AACA,SAAKC,CAAC,GAAGD,CAAC,GAAG,CAAb,EAAgBC,CAAC,GAAGF,KAAK,CAACI,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACnC,UAAIF,KAAK,CAACE,CAAD,CAAL,GAAWF,KAAK,CAACG,OAAD,CAApB,EAA+B;AAC3BA,QAAAA,OAAO,GAAGD,CAAV;AACH;AACJ,KAPL,CAQI;;;AAEAR,IAAAA,IAAI,CAACM,KAAD,EAAOG,OAAP,EAAgBF,CAAhB,CAAJ;AACH;AACJ;;AAED,eAAeF,aAAf","sourcesContent":["function swap(arr, indexOne, indexTwo)\n{\n    var temp = arr[indexOne];\n    arr[indexOne] = arr[indexTwo];\n    arr[indexTwo] = temp;\n}\n \nfunction selectionSort(array)\n{\n    var i, j, min_idx;\n \n    // One by one move boundary of unsorted subarray\n    for (i = 0; i < array.length - 1; i++)\n    {\n        // Find the minimum element in unsorted array\n        min_idx = i;\n        for (j = i + 1; j < array.length; j++) {\n            if (array[j] < array[min_idx]) {\n                min_idx = j;\n            }\n        }\n        // Swap the found minimum element with the first element\n\n        swap(array,min_idx, i);\n    }\n}\n\nexport default selectionSort;"]},"metadata":{},"sourceType":"module"}