{"ast":null,"code":"function swap(items, leftIndex, rightIndex) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\n\nfunction partitionHoare(items, left, right) {\n  var animations = [];\n  var pivot = items[Math.floor((right + left) / 2)].props.value,\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    animations.push([\"check\", i, j]);\n\n    while (items[i].props.value < pivot) {\n      animations.push([\"uncheck\", i, i]);\n      i++;\n      animations.push([\"check\", i, i]);\n    }\n\n    while (items[j].props.value > pivot) {\n      animations.push([\"uncheck\", j, j]);\n      j--;\n      animations.push([\"check\", j, j]);\n    } // animations.push([\"check\", i, j]);\n\n\n    if (i <= j) {\n      animations.push([\"swap-wrong\", i, j]);\n      swap(items, i, j); //sawpping two elements\n\n      animations.push([\"swap\", i, j]);\n      animations.push([\"uncheck\", i, j]);\n      i++;\n      j--;\n    } else {\n      animations.push([\"uncheck\", i, j]);\n    }\n  }\n\n  return [i, animations];\n}\n\nfunction quickSortHoare(items, left, right) {\n  var index;\n\n  var _;\n\n  var animationsQuickSort = [];\n  var animationsLeft = [];\n  var animationsRight = [];\n  var animationsPartition = [];\n\n  if (items.length > 1) {\n    [index, animationsPartition] = partitionHoare(items, left, right); //index returned from partition\n\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      [_, animationsLeft] = quickSortHoare(items, left, index - 1);\n    }\n\n    if (index < right) {\n      //more elements on the right side of the pivot\n      [_, animationsRight] = quickSortHoare(items, index, right);\n    }\n  }\n\n  animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n  return [items, animationsQuickSort];\n}\n\nexport default quickSortHoare;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/quickSortHoare.js"],"names":["swap","items","leftIndex","rightIndex","temp","partitionHoare","left","right","animations","pivot","Math","floor","props","value","i","j","push","quickSortHoare","index","_","animationsQuickSort","animationsLeft","animationsRight","animationsPartition","length"],"mappings":"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","sourcesContent":["function swap(items, leftIndex, rightIndex){\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\nfunction partitionHoare(items, left, right) {\n    var animations = [];\n    var pivot = items[Math.floor((right + left) / 2)].props.value, //middle element\n    i = left, //left pointer\n    j = right; //right pointer\n    while (i <= j) {\n        animations.push([\"check\", i, j]);\n        while (items[i].props.value < pivot) {\n            animations.push([\"uncheck\", i, i]);\n            i++;\n            animations.push([\"check\", i, i]);\n        }\n        while (items[j].props.value > pivot) {\n            animations.push([\"uncheck\", j, j]);\n            j--;\n            animations.push([\"check\", j, j]);\n        }\n\n\n        // animations.push([\"check\", i, j]);\n        if (i <= j) {\n            animations.push([\"swap-wrong\", i, j]);\n            swap(items, i, j); //sawpping two elements\n            animations.push([\"swap\", i, j]);\n            animations.push([\"uncheck\", i, j]);\n            i++;\n            j--;\n        } else{\n            animations.push([\"uncheck\", i, j]);\n        }\n    }\n    return [i, animations];\n}\n\nfunction quickSortHoare(items, left, right) {\n    var index;\n    var _;\n    var animationsQuickSort = []\n    var animationsLeft = [];\n    var animationsRight = [];\n    var animationsPartition = [];\n    if (items.length > 1) {\n        [index, animationsPartition] = partitionHoare(items, left, right); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            [_, animationsLeft] = quickSortHoare(items, left, index - 1);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            [_, animationsRight] = quickSortHoare(items, index, right);\n        }\n    }\n    animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n\n    return [items, animationsQuickSort];\n}\n\nexport default quickSortHoare;"]},"metadata":{},"sourceType":"module"}