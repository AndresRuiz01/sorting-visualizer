{"ast":null,"code":"/*\nBubble Sort Description:\n\nIterate over the array comparing two elements that are next to each other. If the first is greater than the second, swap the two elements and continue.\nAfter that iteration, the largest element will be at the end of the array. Iterate over the array again (not needing to check the last spot) and this \nwill put the second largest in the second spot. Continue this process until 1. There are no swaps performed in an iteration (sorted array) or \n2. The final iteration comparing the first two elements occures.  \n\n*/\nexport default function bubbleSort(array) {\n  var animations = [];\n\n  for (let i = 0; i < array.length; i++) {\n    var swapped = false;\n\n    for (let j = 0; j < array.length - i - 1; j++) {\n      animations.push([\"check\", j, j + 1]);\n      var heightOne = array[j].props.value;\n      var heightTwo = array[j + 1].props.value;\n\n      if (heightOne > heightTwo) {\n        animations.push([\"swap-wrong\", j, j + 1]);\n        var temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        swapped = true;\n        animations.push([\"swap\", j, j + 1]);\n        animations.push([\"check\", j, j + 1]);\n      }\n\n      animations.push([\"uncheck\", j, j + 1]);\n    }\n\n    if (!swapped) {\n      break;\n    }\n  }\n\n  return animations;\n}","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/bubbleSort.js"],"names":["bubbleSort","array","animations","i","length","swapped","j","push","heightOne","props","value","heightTwo","temp"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACtC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,OAAO,GAAG,KAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACG,MAAN,GAAeD,CAAf,GAAmB,CAAvC,EAA0CG,CAAC,EAA3C,EAA+C;AAC3CJ,MAAAA,UAAU,CAACK,IAAX,CAAgB,CAAC,OAAD,EAAUD,CAAV,EAAaA,CAAC,GAAC,CAAf,CAAhB;AACA,UAAIE,SAAS,GAAGP,KAAK,CAACK,CAAD,CAAL,CAASG,KAAT,CAAeC,KAA/B;AACA,UAAIC,SAAS,GAAGV,KAAK,CAACK,CAAC,GAAC,CAAH,CAAL,CAAWG,KAAX,CAAiBC,KAAjC;;AACA,UAAKF,SAAS,GAAGG,SAAjB,EAA6B;AACzBT,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAAC,YAAD,EAAeD,CAAf,EAAkBA,CAAC,GAAC,CAApB,CAAhB;AACA,YAAIM,IAAI,GAAGX,KAAK,CAACK,CAAD,CAAhB;AACAL,QAAAA,KAAK,CAACK,CAAD,CAAL,GAAWL,KAAK,CAACK,CAAC,GAAC,CAAH,CAAhB;AACAL,QAAAA,KAAK,CAACK,CAAC,GAAC,CAAH,CAAL,GAAaM,IAAb;AACAP,QAAAA,OAAO,GAAG,IAAV;AACAH,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAT,EAAYA,CAAC,GAAC,CAAd,CAAhB;AACAJ,QAAAA,UAAU,CAACK,IAAX,CAAgB,CAAC,OAAD,EAAUD,CAAV,EAAaA,CAAC,GAAC,CAAf,CAAhB;AACH;;AACDJ,MAAAA,UAAU,CAACK,IAAX,CAAgB,CAAC,SAAD,EAAYD,CAAZ,EAAeA,CAAC,GAAC,CAAjB,CAAhB;AACH;;AAED,QAAI,CAACD,OAAL,EAAc;AACV;AACH;AAEJ;;AACD,SAAOH,UAAP;AACH","sourcesContent":["\n/*\nBubble Sort Description:\n\nIterate over the array comparing two elements that are next to each other. If the first is greater than the second, swap the two elements and continue.\nAfter that iteration, the largest element will be at the end of the array. Iterate over the array again (not needing to check the last spot) and this \nwill put the second largest in the second spot. Continue this process until 1. There are no swaps performed in an iteration (sorted array) or \n2. The final iteration comparing the first two elements occures.  \n\n*/\nexport default function bubbleSort(array) {\n    var animations = [];\n\n    for (let i = 0; i < array.length; i++) {\n        var swapped = false;\n        for (let j = 0; j < array.length - i - 1; j++) {\n            animations.push([\"check\", j, j+1]);\n            var heightOne = array[j].props.value;\n            var heightTwo = array[j+1].props.value;\n            if ( heightOne > heightTwo ) {\n                animations.push([\"swap-wrong\", j, j+1]);\n                var temp = array[j]\n                array[j] = array[j+1];\n                array[j+1] = temp;\n                swapped = true;\n                animations.push([\"swap\", j, j+1]);\n                animations.push([\"check\", j, j+1]);\n            }\n            animations.push([\"uncheck\", j, j+1]);\n        }\n\n        if (!swapped) {\n            break;\n        }\n\n    }\n    return animations;\n}\n"]},"metadata":{},"sourceType":"module"}