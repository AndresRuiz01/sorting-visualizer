{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort'; // import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      starting_array: [],\n      algorithm: sortingAlgorithms.BUBBLE_SORT,\n      visualizationType: visualizationTypes.BAR_HEIGHT\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const min = 30;\n    const max = 700;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    var new_array = [];\n\n    for (var i = 0; i < 50; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        element_height: height,\n        style: {\n          backgroundColor: \"#282c34\"\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n    this.setState({\n      starting_array: new_array\n    });\n  }\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    });\n  }\n\n  sortElements() {\n    var animations = getBubbleSortAnimations(this.state.array.slice());\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"green\";\n          gridElements[barTwoIdx].style.backgroundColor = \"green\"; // barOne.props.style.backgroundColor = \"#ffffff\";\n          // barTwo.props.style.backgroundColor = \"#ffffff\";\n          // console.log(barOne);\n        }\n\n        if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n        }\n\n        if (animation_type === \"swap-wrong\") {\n          gridElements[barOneIdx].style.backgroundColor = \"red\";\n          gridElements[barTwoIdx].style.backgroundColor = \"red\";\n        }\n\n        if (animation_type === \"swap\") {\n          var temp = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp;\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * this.state.speed);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateNewArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm,\n        updateSelectedVisualizationType: this.updateSelectedVisualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["React","GridElement","getBubbleSortAnimations","visualizationTypes","sortingAlgorithms","Header","SortingVisualizer","Component","constructor","props","state","array","starting_array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","generateNewArray","bind","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","componentDidMount","getRandomInt","min","max","Math","floor","random","new_array","i","height","push","backgroundColor","setState","e","target","value","animations","slice","temp_array","length","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","temp","speed","render"],"mappings":"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","sourcesContent":["import './sortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\n// import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\n\nimport Header from './header'\nimport './App.css';\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            starting_array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const min = 30;\n        const max = 700;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        var new_array = [];\n        for (var i = 0; i < 50; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} element_height={height} style={{backgroundColor: \"#282c34\"}} />);\n        }\n        this.setState({array: new_array});\n        this.setState({starting_array: new_array});\n\n    }\n\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value});\n    };\n\n    sortElements() {\n        var animations = getBubbleSortAnimations(this.state.array.slice());\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"green\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                    // barOne.props.style.backgroundColor = \"#ffffff\";\n                    // barTwo.props.style.backgroundColor = \"#ffffff\";\n                    // console.log(barOne);\n                }\n\n                if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                }\n\n                if (animation_type === \"swap-wrong\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                }\n\n                if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * this.state.speed);\n        }\n    }\n\n    render () {\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                    />\n                <div className=\"sorting-grid\">\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}