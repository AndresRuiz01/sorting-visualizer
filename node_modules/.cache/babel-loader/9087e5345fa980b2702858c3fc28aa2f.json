{"ast":null,"code":"function swap(array, indexOne, indexTwo) {\n  var temp = array[indexOne];\n  array[indexOne] = array[indexTwo];\n  array[indexTwo] = temp;\n}\n\nfunction selectionSort(array) {\n  var i, j, min_idx;\n  var animations = []; // One by one move boundary of unsorted subarray\n\n  for (i = 0; i < array.length - 1; i++) {\n    // Find the minimum element in unsorted array\n    min_idx = i;\n    animations.push([\"check\", i, min_idx]);\n\n    for (j = i + 1; j < array.length; j++) {\n      if (array[j].props.value < array[min_idx].props.value) {\n        animations.push([\"uncheck-check\", min_idx, j]);\n        min_idx = j;\n      } else if (j + 1 === array.length) {\n        animations.push([\"uncheck-check\", j, min_idx]);\n      } else {\n        animations.push([\"uncheck-check\", j, j + 1]);\n      }\n    } // Swap the found minimum element with the first element\n\n\n    animations.push([\"swap\", min_idx, i]);\n    swap(array, min_idx, i);\n    animations.push([\"correct\", i, i]);\n  }\n\n  return animations;\n}\n\nexport default selectionSort;","map":{"version":3,"sources":["/Users/andres/Desktop/sorting-visualizer/src/sorting_algorithms/selectionSort.js"],"names":["swap","array","indexOne","indexTwo","temp","selectionSort","i","j","min_idx","animations","length","push","props","value"],"mappings":"AAAA,SAASA,IAAT,CAAcC,KAAd,EAAqBC,QAArB,EAA+BC,QAA/B,EAAwC;AACpC,MAAIC,IAAI,GAAGH,KAAK,CAACC,QAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,QAAD,CAAL,GAAkBD,KAAK,CAACE,QAAD,CAAvB;AACAF,EAAAA,KAAK,CAACE,QAAD,CAAL,GAAkBC,IAAlB;AACH;;AAED,SAASC,aAAT,CAAuBJ,KAAvB,EAA8B;AAC1B,MAAIK,CAAJ,EAAOC,CAAP,EAAUC,OAAV;AACA,MAAIC,UAAU,GAAG,EAAjB,CAF0B,CAG1B;;AAEA,OAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,KAAK,CAACS,MAAN,GAAe,CAA/B,EAAkCJ,CAAC,EAAnC,EAAuC;AACnC;AACAE,IAAAA,OAAO,GAAGF,CAAV;AACAG,IAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,OAAD,EAAUL,CAAV,EAAaE,OAAb,CAAhB;;AACA,SAAKD,CAAC,GAAGD,CAAC,GAAG,CAAb,EAAgBC,CAAC,GAAGN,KAAK,CAACS,MAA1B,EAAkCH,CAAC,EAAnC,EAAuC;AACnC,UAAIN,KAAK,CAACM,CAAD,CAAL,CAASK,KAAT,CAAeC,KAAf,GAAuBZ,KAAK,CAACO,OAAD,CAAL,CAAeI,KAAf,CAAqBC,KAAhD,EAAuD;AACnDJ,QAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,eAAD,EAAkBH,OAAlB,EAA2BD,CAA3B,CAAhB;AACAC,QAAAA,OAAO,GAAGD,CAAV;AACH,OAHD,MAGO,IAAKA,CAAC,GAAG,CAAL,KAAYN,KAAK,CAACS,MAAtB,EAA8B;AACjCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,eAAD,EAAkBJ,CAAlB,EAAqBC,OAArB,CAAhB;AACH,OAFM,MAEA;AACHC,QAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,eAAD,EAAkBJ,CAAlB,EAAqBA,CAAC,GAAC,CAAvB,CAAhB;AACH;AACJ,KAbkC,CAcnC;;;AACAE,IAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,MAAD,EAASH,OAAT,EAAkBF,CAAlB,CAAhB;AACAN,IAAAA,IAAI,CAACC,KAAD,EAAOO,OAAP,EAAgBF,CAAhB,CAAJ;AACAG,IAAAA,UAAU,CAACE,IAAX,CAAgB,CAAC,SAAD,EAAYL,CAAZ,EAAeA,CAAf,CAAhB;AACH;;AACD,SAAOG,UAAP;AACH;;AAED,eAAeJ,aAAf","sourcesContent":["function swap(array, indexOne, indexTwo){\n    var temp = array[indexOne];\n    array[indexOne] = array[indexTwo];\n    array[indexTwo] = temp;\n}\n \nfunction selectionSort(array) {\n    var i, j, min_idx;\n    var animations = [];\n    // One by one move boundary of unsorted subarray\n\n    for (i = 0; i < array.length - 1; i++) {\n        // Find the minimum element in unsorted array\n        min_idx = i;\n        animations.push([\"check\", i, min_idx]);\n        for (j = i + 1; j < array.length; j++) {\n            if (array[j].props.value < array[min_idx].props.value) {\n                animations.push([\"uncheck-check\", min_idx, j]);\n                min_idx = j;\n            } else if ((j + 1) === array.length) {\n                animations.push([\"uncheck-check\", j, min_idx]);\n            } else {\n                animations.push([\"uncheck-check\", j, j+1]);\n            }\n        }\n        // Swap the found minimum element with the first element\n        animations.push([\"swap\", min_idx, i]);\n        swap(array,min_idx, i);\n        animations.push([\"correct\", i, i]);\n    }\n    return animations;\n}\n\nexport default selectionSort;"]},"metadata":{},"sourceType":"module"}