{"ast":null,"code":"// function mergeArrays(a, b) {\n//     const c = []\n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n//     return c\n// }\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\nfunction merge(array, start, half, end) {\n  var animations = [];\n  var leftPosition = start;\n  var rightPosition = start + half + 1;\n\n  while (rightPosition < end) {\n    if (array[rightPosition].props === undefined) {\n      console.log(\"Right Undefined\", array, leftPosition, rightPosition);\n      return animations;\n    }\n\n    if (array[leftPosition].props === undefined) {\n      console.log(\"Left Undefined\", array, leftPosition, rightPosition);\n      return animations;\n    }\n\n    if (array[leftPosition].props.value < array[rightPosition].props.value) {\n      leftPosition++;\n    } else {\n      // Shift right and insert element\n      // Grab element\n      const movedElement = array.splice(rightPosition, 1); // Place in new position\n\n      array.splice(leftPosition, 0, movedElement);\n      animations.push(['shift', leftPosition, rightPosition]);\n      leftPosition++;\n      rightPosition++;\n    }\n  }\n\n  return animations;\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n  const half = Math.floor((endIndex - startIndex) / 2);\n\n  if (endIndex - startIndex < 2) {\n    return array;\n  }\n\n  const leftAnimations = mergeSort(array, startIndex, startIndex + half);\n  const rightAnimations = mergeSort(array, startIndex + half + 1, endIndex);\n  const mergeAnimations = merge(array, startIndex, half, endIndex);\n  return [...leftAnimations, ...rightAnimations, ...mergeAnimations];\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/merge_sort.js"],"names":["merge","array","start","half","end","animations","leftPosition","rightPosition","props","undefined","console","log","value","movedElement","splice","push","mergeSort","startIndex","endIndex","Math","floor","leftAnimations","rightAnimations","mergeAnimations"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,GAAnC,EAAwC;AACpC,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,YAAY,GAAGJ,KAAnB;AACA,MAAIK,aAAa,GAAGL,KAAK,GAAGC,IAAR,GAAe,CAAnC;;AACA,SAAOI,aAAa,GAAGH,GAAvB,EAA4B;AACxB,QAAIH,KAAK,CAACM,aAAD,CAAL,CAAqBC,KAArB,KAA+BC,SAAnC,EAA8C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BV,KAA/B,EAAsCK,YAAtC,EAAoDC,aAApD;AACA,aAAOF,UAAP;AACH;;AACD,QAAIJ,KAAK,CAACK,YAAD,CAAL,CAAoBE,KAApB,KAA8BC,SAAlC,EAA6C;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,KAA9B,EAAqCK,YAArC,EAAmDC,aAAnD;AACA,aAAOF,UAAP;AACH;;AACD,QAAIJ,KAAK,CAACK,YAAD,CAAL,CAAoBE,KAApB,CAA0BI,KAA1B,GAAkCX,KAAK,CAACM,aAAD,CAAL,CAAqBC,KAArB,CAA2BI,KAAjE,EAAwE;AACpEN,MAAAA,YAAY;AACf,KAFD,MAEO;AACH;AACA;AACA,YAAMO,YAAY,GAAGZ,KAAK,CAACa,MAAN,CAAaP,aAAb,EAA4B,CAA5B,CAArB,CAHG,CAIH;;AACAN,MAAAA,KAAK,CAACa,MAAN,CAAaR,YAAb,EAA2B,CAA3B,EAA8BO,YAA9B;AACAR,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAAC,OAAD,EAAUT,YAAV,EAAwBC,aAAxB,CAAhB;AACAD,MAAAA,YAAY;AACZC,MAAAA,aAAa;AAChB;AACJ;;AACD,SAAOF,UAAP;AACH;;AAED,SAASW,SAAT,CAAmBf,KAAnB,EAA0BgB,UAA1B,EAAsCC,QAAtC,EAAgD;AAC5C,QAAMf,IAAI,GAAGgB,IAAI,CAACC,KAAL,CAAW,CAACF,QAAQ,GAAGD,UAAZ,IAA0B,CAArC,CAAb;;AAEA,MAAKC,QAAQ,GAAGD,UAAZ,GAA0B,CAA9B,EAAiC;AAC7B,WAAOhB,KAAP;AACH;;AAED,QAAMoB,cAAc,GAAGL,SAAS,CAACf,KAAD,EAAQgB,UAAR,EAAoBA,UAAU,GAAGd,IAAjC,CAAhC;AACA,QAAMmB,eAAe,GAAGN,SAAS,CAACf,KAAD,EAAQgB,UAAU,GAAGd,IAAb,GAAoB,CAA5B,EAA+Be,QAA/B,CAAjC;AACA,QAAMK,eAAe,GAAGvB,KAAK,CAACC,KAAD,EAAQgB,UAAR,EAAoBd,IAApB,EAA0Be,QAA1B,CAA7B;AAEA,SAAO,CAAC,GAAGG,cAAJ,EAAoB,GAAGC,eAAvB,EAAwC,GAAGC,eAA3C,CAAP;AAEH;;AAED,eAAeP,SAAf","sourcesContent":["// function mergeArrays(a, b) {\n//     const c = []\n  \n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n  \n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n  \n//     return c\n// }\n\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\n\nfunction merge(array, start, half, end) {\n    var animations = []\n    var leftPosition = start;\n    var rightPosition = start + half + 1;\n    while (rightPosition < end) {\n        if (array[rightPosition].props === undefined) {\n            console.log(\"Right Undefined\", array, leftPosition, rightPosition);\n            return animations;\n        }\n        if (array[leftPosition].props === undefined) {\n            console.log(\"Left Undefined\", array, leftPosition, rightPosition);\n            return animations;\n        }\n        if (array[leftPosition].props.value < array[rightPosition].props.value) {\n            leftPosition++;\n        } else {\n            // Shift right and insert element\n            // Grab element\n            const movedElement = array.splice(rightPosition, 1)\n            // Place in new position\n            array.splice(leftPosition, 0, movedElement);\n            animations.push(['shift', leftPosition, rightPosition]);\n            leftPosition++;\n            rightPosition++;\n        }\n    }\n    return animations;\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n    const half = Math.floor((endIndex - startIndex) / 2);\n\n    if ((endIndex - startIndex) < 2) {\n        return array;\n    }\n\n    const leftAnimations = mergeSort(array, startIndex, startIndex + half);\n    const rightAnimations = mergeSort(array, startIndex + half + 1, endIndex)\n    const mergeAnimations = merge(array, startIndex, half, endIndex)\n\n    return [...leftAnimations, ...rightAnimations, ...mergeAnimations];\n\n}\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}