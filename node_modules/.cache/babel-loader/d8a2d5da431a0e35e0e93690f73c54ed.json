{"ast":null,"code":"function merge(left, right) {\n  let arr = []; // Break out of loop if any one of the array gets empty\n\n  while (left.length && right.length) {\n    // Pick the smaller among the smallest element of left and right sub arrays \n    if (left[0] < right[0]) {\n      arr.push(left.shift());\n    } else {\n      arr.push(right.shift());\n    }\n  } // Concatenating the leftover elements\n  // (in case we didn't go through the entire left or right array)\n\n\n  return [...arr, ...left, ...right];\n}\n\nfunction mergeSort(array) {\n  const half = array.length / 2; // Base case or terminating case\n\n  if (array.length < 2) {\n    return array;\n  }\n\n  const left = array.splice(0, half);\n  return merge(mergeSort(left), mergeSort(array));\n} // function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n// }\n\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/merge_sort.js"],"names":["merge","left","right","arr","length","push","shift","mergeSort","array","half","splice"],"mappings":"AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACxB,MAAIC,GAAG,GAAG,EAAV,CADwB,CAExB;;AACA,SAAOF,IAAI,CAACG,MAAL,IAAeF,KAAK,CAACE,MAA5B,EAAoC;AAChC;AACA,QAAIH,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAnB,EAAwB;AACpBC,MAAAA,GAAG,CAACE,IAAJ,CAASJ,IAAI,CAACK,KAAL,EAAT;AACH,KAFD,MAEO;AACHH,MAAAA,GAAG,CAACE,IAAJ,CAASH,KAAK,CAACI,KAAN,EAAT;AACH;AACJ,GAVuB,CAYxB;AACA;;;AACA,SAAO,CAAE,GAAGH,GAAL,EAAU,GAAGF,IAAb,EAAmB,GAAGC,KAAtB,CAAP;AACH;;AAED,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAMC,IAAI,GAAGD,KAAK,CAACJ,MAAN,GAAe,CAA5B,CADsB,CAGtB;;AACA,MAAGI,KAAK,CAACJ,MAAN,GAAe,CAAlB,EAAoB;AAClB,WAAOI,KAAP;AACD;;AAED,QAAMP,IAAI,GAAGO,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBD,IAAhB,CAAb;AACA,SAAOT,KAAK,CAACO,SAAS,CAACN,IAAD,CAAV,EAAiBM,SAAS,CAACC,KAAD,CAA1B,CAAZ;AACH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;AAEA,eAAeD,SAAf","sourcesContent":["function merge(left, right) {\n    let arr = []\n    // Break out of loop if any one of the array gets empty\n    while (left.length && right.length) {\n        // Pick the smaller among the smallest element of left and right sub arrays \n        if (left[0] < right[0]) {\n            arr.push(left.shift())  \n        } else {\n            arr.push(right.shift()) \n        }\n    }\n    \n    // Concatenating the leftover elements\n    // (in case we didn't go through the entire left or right array)\n    return [ ...arr, ...left, ...right ]\n}\n\nfunction mergeSort(array) {\n    const half = array.length / 2\n    \n    // Base case or terminating case\n    if(array.length < 2){\n      return array \n    }\n    \n    const left = array.splice(0, half)\n    return merge(mergeSort(left),mergeSort(array))\n}\n\n\n// function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n\n// }\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}