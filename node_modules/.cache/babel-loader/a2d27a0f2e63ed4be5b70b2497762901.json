{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort'; // import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: sortingAlgorithms.BUBBLE_SORT,\n      visualizationType: visualizationTypes.BAR_HEIGHT,\n      isSorting: false\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.generateColoredArray = this.generateColoredArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const min = 30;\n    const max = 700;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    var new_array = [];\n\n    for (var i = 0; i < 90; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        element_height: height,\n        style: {\n          width: \"8px\",\n          backgroundColor: \"purple\",\n          padding: \"0px 2px\",\n          margin: \"0px 1px\"\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n  } // hsl(120,60%,70%)\n\n\n  generateColoredArray() {\n    var new_array = [];\n\n    for (var i = 0; i < 90; i++) {\n      var hsl_string = \"hsl(\" + i * 3 + \",60%,70%)\"; // console.log(hsl_string);\n\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        element_height: 700,\n        style: {\n          backgroundColor: hsl_string\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n  }\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    });\n  }\n\n  sortElements() {\n    if (this.state.isSorting) {\n      return;\n    }\n\n    this.setState({\n      isSorting: true\n    });\n    var animations = getBubbleSortAnimations(this.state.array.slice());\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"green\";\n          gridElements[barTwoIdx].style.backgroundColor = \"green\"; // barOne.props.style.backgroundColor = \"#ffffff\";\n          // barTwo.props.style.backgroundColor = \"#ffffff\";\n          // console.log(barOne);\n        }\n\n        if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n        }\n\n        if (animation_type === \"swap-wrong\") {\n          gridElements[barOneIdx].style.backgroundColor = \"red\";\n          gridElements[barTwoIdx].style.backgroundColor = \"red\";\n        }\n\n        if (animation_type === \"swap\") {\n          var temp = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp;\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * 5);\n    }\n\n    this.setState({\n      isSorting: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateColoredArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm,\n        updateSelectedVisualizationType: this.updateSelectedVisualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"below-header-space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["React","GridElement","getBubbleSortAnimations","visualizationTypes","sortingAlgorithms","Header","SortingVisualizer","Component","constructor","props","state","array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","isSorting","generateNewArray","bind","generateColoredArray","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","componentDidMount","getRandomInt","min","max","Math","floor","random","new_array","i","height","push","width","backgroundColor","padding","margin","setState","hsl_string","e","target","value","animations","slice","temp_array","length","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","temp","render"],"mappings":"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","sourcesContent":["import './sortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\n// import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\n\nimport Header from './header'\nimport './App.css';\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n            isSorting: false,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n\n        this.generateColoredArray = this.generateColoredArray.bind(this);\n\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const min = 30;\n        const max = 700;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        var new_array = [];\n        for (var i = 0; i < 90; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement key={i} element_height={height} style={{width: \"8px\", backgroundColor: \"purple\", padding: \"0px 2px\", margin: \"0px 1px\"}} />);\n        }\n        this.setState({array: new_array});\n\n    }\n\n    // hsl(120,60%,70%)\n    generateColoredArray() {\n        var new_array = [];\n        for (var i = 0; i < 90; i++) {\n            var hsl_string = \"hsl(\"+i*3+\",60%,70%)\";\n            // console.log(hsl_string);\n            new_array.push(<GridElement className=\"grid-element\" key={i} element_height={700} style={{backgroundColor: hsl_string}} />);\n        }\n        this.setState({array: new_array});\n    }\n\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value});\n    };\n\n    sortElements() {\n        if (this.state.isSorting) {\n            return;\n        }\n        this.setState({isSorting: true});\n        var animations = getBubbleSortAnimations(this.state.array.slice());\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"green\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                    // barOne.props.style.backgroundColor = \"#ffffff\";\n                    // barTwo.props.style.backgroundColor = \"#ffffff\";\n                    // console.log(barOne);\n                }\n\n                if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                }\n\n                if (animation_type === \"swap-wrong\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                }\n\n                if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * 5);\n        }\n        this.setState({isSorting: false});\n    }\n\n    render () {\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateColoredArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                    />\n                <div className=\"below-header-space\"></div>\n                <div className=\"sorting-grid\">\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}