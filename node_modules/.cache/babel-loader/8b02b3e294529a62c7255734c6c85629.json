{"ast":null,"code":"// function mergeArrays(a, b) {\n//     const c = []\n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n//     return c\n// }\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\nfunction merge(array, start, half, end) {\n  var animations = [];\n  var leftPosition = start;\n  var rightPosition = start + half + 1;\n\n  while (rightPosition <= end && leftPosition < rightPosition) {\n    animations.push([\"check\", leftPosition, rightPosition]);\n\n    if (array[leftPosition].props.value <= array[rightPosition].props.value) {\n      animations.push([\"uncheck\", leftPosition, leftPosition]);\n      leftPosition++;\n    } else {\n      // Shift right and insert element\n      // Grab element\n      const movedElement = array.splice(rightPosition, 1); // Place in new position\n\n      array.splice(leftPosition, 0, movedElement[0]);\n      animations.push([\"swap-wrong\", leftPosition, leftPosition]);\n      animations.push(['shift', leftPosition, rightPosition]);\n      animations.push([\"check\", leftPosition, leftPosition]);\n      animations.push([\"uncheck\", leftPosition, leftPosition]);\n      leftPosition++;\n      rightPosition++;\n    }\n  }\n\n  animations.push([\"uncheck\", leftPosition, rightPosition]);\n  return animations;\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n  const half = Math.floor((endIndex - startIndex) / 2);\n\n  if (endIndex - startIndex < 1) {\n    return [];\n  }\n\n  const leftAnimations = mergeSort(array, startIndex, startIndex + half);\n  const rightAnimations = mergeSort(array, startIndex + half + 1, endIndex);\n  const mergeAnimations = merge(array, startIndex, half, endIndex);\n  return [...leftAnimations, ...rightAnimations, ...mergeAnimations];\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/mergeSort.js"],"names":["merge","array","start","half","end","animations","leftPosition","rightPosition","push","props","value","movedElement","splice","mergeSort","startIndex","endIndex","Math","floor","leftAnimations","rightAnimations","mergeAnimations"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,GAAnC,EAAwC;AACpC,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,YAAY,GAAGJ,KAAnB;AACA,MAAIK,aAAa,GAAGL,KAAK,GAAGC,IAAR,GAAe,CAAnC;;AACA,SAAOI,aAAa,IAAIH,GAAjB,IAAwBE,YAAY,GAAGC,aAA9C,EAA6D;AACzDF,IAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,OAAD,EAAUF,YAAV,EAAwBC,aAAxB,CAAhB;;AACA,QAAIN,KAAK,CAACK,YAAD,CAAL,CAAoBG,KAApB,CAA0BC,KAA1B,IAAmCT,KAAK,CAACM,aAAD,CAAL,CAAqBE,KAArB,CAA2BC,KAAlE,EAAyE;AACrEL,MAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,SAAD,EAAYF,YAAZ,EAA0BA,YAA1B,CAAhB;AACAA,MAAAA,YAAY;AACf,KAHD,MAGO;AACH;AACA;AACA,YAAMK,YAAY,GAAGV,KAAK,CAACW,MAAN,CAAaL,aAAb,EAA4B,CAA5B,CAArB,CAHG,CAIH;;AACAN,MAAAA,KAAK,CAACW,MAAN,CAAaN,YAAb,EAA2B,CAA3B,EAA8BK,YAAY,CAAC,CAAD,CAA1C;AACAN,MAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,YAAD,EAAeF,YAAf,EAA6BA,YAA7B,CAAhB;AACAD,MAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,OAAD,EAAUF,YAAV,EAAwBC,aAAxB,CAAhB;AACAF,MAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,OAAD,EAAUF,YAAV,EAAwBA,YAAxB,CAAhB;AACAD,MAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,SAAD,EAAYF,YAAZ,EAA0BA,YAA1B,CAAhB;AACAA,MAAAA,YAAY;AACZC,MAAAA,aAAa;AAChB;AACJ;;AACDF,EAAAA,UAAU,CAACG,IAAX,CAAgB,CAAC,SAAD,EAAYF,YAAZ,EAA0BC,aAA1B,CAAhB;AACA,SAAOF,UAAP;AACH;;AAED,SAASQ,SAAT,CAAmBZ,KAAnB,EAA0Ba,UAA1B,EAAsCC,QAAtC,EAAgD;AAC5C,QAAMZ,IAAI,GAAGa,IAAI,CAACC,KAAL,CAAW,CAACF,QAAQ,GAAGD,UAAZ,IAA0B,CAArC,CAAb;;AAEA,MAAKC,QAAQ,GAAGD,UAAZ,GAA0B,CAA9B,EAAiC;AAC7B,WAAO,EAAP;AACH;;AACD,QAAMI,cAAc,GAAGL,SAAS,CAACZ,KAAD,EAAQa,UAAR,EAAoBA,UAAU,GAAGX,IAAjC,CAAhC;AACA,QAAMgB,eAAe,GAAGN,SAAS,CAACZ,KAAD,EAAQa,UAAU,GAAGX,IAAb,GAAoB,CAA5B,EAA+BY,QAA/B,CAAjC;AACA,QAAMK,eAAe,GAAGpB,KAAK,CAACC,KAAD,EAAQa,UAAR,EAAoBX,IAApB,EAA0BY,QAA1B,CAA7B;AACA,SAAO,CAAC,GAAGG,cAAJ,EAAoB,GAAGC,eAAvB,EAAwC,GAAGC,eAA3C,CAAP;AAEH;;AAED,eAAeP,SAAf","sourcesContent":["// function mergeArrays(a, b) {\n//     const c = []\n  \n//     while (a.length && b.length) {\n//       c.push(a[0].props.value > b[0].props.value ? b.shift() : a.shift())\n//     }\n  \n//     //if we still have values, let's add them at the end of `c`\n//     while (a.length) {\n//       c.push(a.shift())\n//     }\n//     while (b.length) {\n//       c.push(b.shift())\n//     }\n  \n//     return c\n// }\n\n// function mergeSort(a) {\n//     if (a.length < 2) return a\n//     const middle = Math.floor(a.length / 2)\n//     const a_l = a.slice(0, middle)\n//     const a_r = a.slice(middle, a.length)\n//     const sorted_l = mergeSort(a_l)\n//     const sorted_r = mergeSort(a_r)\n//     return mergeArrays(sorted_l, sorted_r)\n// }\n\nfunction merge(array, start, half, end) {\n    var animations = []\n    var leftPosition = start;\n    var rightPosition = start + half + 1;\n    while (rightPosition <= end && leftPosition < rightPosition) {\n        animations.push([\"check\", leftPosition, rightPosition]);\n        if (array[leftPosition].props.value <= array[rightPosition].props.value) {\n            animations.push([\"uncheck\", leftPosition, leftPosition]);\n            leftPosition++;\n        } else {\n            // Shift right and insert element\n            // Grab element\n            const movedElement = array.splice(rightPosition, 1)\n            // Place in new position\n            array.splice(leftPosition, 0, movedElement[0]);\n            animations.push([\"swap-wrong\", leftPosition, leftPosition]);\n            animations.push(['shift', leftPosition, rightPosition]);\n            animations.push([\"check\", leftPosition, leftPosition]);\n            animations.push([\"uncheck\", leftPosition, leftPosition]);\n            leftPosition++;\n            rightPosition++;\n        }\n    }\n    animations.push([\"uncheck\", leftPosition, rightPosition]);\n    return animations;\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n    const half = Math.floor((endIndex - startIndex) / 2);\n\n    if ((endIndex - startIndex) < 1) {\n        return [];\n    }\n    const leftAnimations = mergeSort(array, startIndex, startIndex + half);\n    const rightAnimations = mergeSort(array, startIndex + half + 1, endIndex);\n    const mergeAnimations = merge(array, startIndex, half, endIndex);\n    return [...leftAnimations, ...rightAnimations, ...mergeAnimations];\n\n}\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}