{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport quickSortHoare from './sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from './sorting_algorithms/quickSortLomunto';\nimport mergeSort from './sorting_algorithms/mergeSort';\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\n\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: sortingAlgorithms.BUBBLE_SORT,\n      visualizationType: visualizationTypes.BAR_HEIGHT,\n      windowHeight: window.innerHeight\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize(e) {\n    this.setState({\n      windowHeight: window.innerHeight\n    });\n    this.generateNewArray();\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const windowHeight = this.state.windowHeight;\n    const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n    const min = 30;\n    const max = maxBarHeight;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n      this.generateHeightArray();\n    } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n      this.generateColoredArray();\n    }\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  generateHeightArray() {\n    var new_array = [];\n\n    for (var i = 0; i < NUM_BARS; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: height,\n        element_height: height,\n        color: \"#282c34\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n  }\n  /*\n  Method to generate an array of colored elements using the HSL color scheme\n  */\n\n\n  generateColoredArray() {\n    const windowHeight = this.state.windowHeight;\n    const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n    var new_array = [];\n\n    for (var i = 0; i < NUM_BARS; i++) {\n      var value = i * 3;\n      var hsl_string = \"hsl(\" + value + \",60%,70%)\";\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: value,\n        element_height: maxBarHeight,\n        color: hsl_string\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 28\n      }, this));\n    }\n\n    new_array = this.shuffle(new_array);\n    this.setState({\n      array: new_array\n    });\n  }\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    }, () => {\n      this.generateNewArray();\n    });\n  }\n\n  sortElements() {\n    var animations = [];\n\n    var _;\n\n    if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n      animations = getBubbleSortAnimations(this.state.array.slice());\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n      [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n      [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n      animations = mergeSort(this.state.array.slice(), 0, this.state.array.length - 1);\n    }\n\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n          if (animation_type === \"check\") {\n            gridElements[barOneIdx].style.backgroundColor = \"green\";\n            gridElements[barTwoIdx].style.backgroundColor = \"green\";\n          }\n\n          if (animation_type === \"uncheck\") {\n            gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n            gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n          }\n\n          if (animation_type === \"swap-wrong\") {\n            gridElements[barOneIdx].style.backgroundColor = \"red\";\n            gridElements[barTwoIdx].style.backgroundColor = \"red\";\n          }\n\n          if (animation_type === \"swap\") {\n            var temp = temp_array[barOneIdx];\n            temp_array[barOneIdx] = temp_array[barTwoIdx];\n            temp_array[barTwoIdx] = temp;\n          }\n\n          if (animation_type === \"shift\") {\n            const movedElement = temp_array.splice(barTwoIdx, 1);\n            temp_array.splice(barOneIdx, 0, movedElement[0]);\n          }\n        } else {\n          if (animation_type === \"check\") {\n            gridElements[barOneIdx].style.border = \"black 1px solid\";\n            gridElements[barTwoIdx].style.border = \"black 1px solid\";\n          }\n\n          if (animation_type === \"uncheck\") {\n            gridElements[barOneIdx].style.border = \"white 1px solid\";\n            gridElements[barTwoIdx].style.border = \"white 1px solid\";\n          }\n\n          if (animation_type === \"swap\") {\n            var temp_two = temp_array[barOneIdx];\n            temp_array[barOneIdx] = temp_array[barTwoIdx];\n            temp_array[barTwoIdx] = temp_two;\n          }\n\n          if (animation_type === \"shift\") {\n            const movedElement = temp_array.splice(barTwoIdx, 1);\n            temp_array.splice(barOneIdx, 0, movedElement[0]);\n          }\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * 30);\n    }\n  }\n\n  render() {\n    const windowHeight = this.state.windowHeight;\n    const visualizerHeight = windowHeight - 140;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateNewArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm,\n        updateSelectedVisualizationType: this.updateSelectedVisualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        style: {\n          height: visualizerHeight\n        },\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["React","GridElement","getBubbleSortAnimations","quickSortHoare","quickSortLomunto","mergeSort","visualizationTypes","sortingAlgorithms","Header","NUM_BARS","HEADER_DIFFERENCE","SortingVisualizer","Component","constructor","props","state","array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","windowHeight","window","innerHeight","generateNewArray","bind","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","handleResize","componentDidMount","addEventListener","componentWillUnmount","e","setState","getRandomInt","maxBarHeight","min","max","Math","floor","random","generateHeightArray","COLOR","generateColoredArray","shuffle","currentIndex","length","randomIndex","new_array","i","height","push","value","hsl_string","target","animations","_","slice","QUICK_SORT_HOARE","QUICK_SORT_LOMUNTO","MERGE_SORT","temp_array","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","backgroundColor","temp","movedElement","splice","border","temp_two","render","visualizerHeight"],"mappings":"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","sourcesContent":["import './sortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport quickSortHoare from './sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from './sorting_algorithms/quickSortLomunto';\nimport mergeSort from './sorting_algorithms/mergeSort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\n\nimport Header from './header'\nimport './App.css';\n\n\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n            windowHeight: window.innerHeight,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    handleResize(e) {\n        this.setState({windowHeight: window.innerHeight});\n        this.generateNewArray();\n    }\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        const min = 30;\n        const max = maxBarHeight;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.generateHeightArray();\n        } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n            this.generateColoredArray();\n        }\n    }\n\n    shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n      \n    generateHeightArray() {\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={height} element_height={height} color={\"#282c34\"}/>);\n        }\n        this.setState({array: new_array});\n    }\n\n    /*\n    Method to generate an array of colored elements using the HSL color scheme\n    */\n    generateColoredArray() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var value = i * 3;\n            var hsl_string = \"hsl(\"+value+\",60%,70%)\";\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={value} element_height={maxBarHeight} color={hsl_string} />);\n        }\n        new_array = this.shuffle(new_array); \n        this.setState({array: new_array});\n    }\n\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value}, () => {this.generateNewArray();});\n    };\n\n    sortElements() {\n        var animations = [];\n        var _;\n        if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n            animations = getBubbleSortAnimations(this.state.array.slice());\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n            [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n            [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n            animations = mergeSort(this.state.array.slice(), 0, this.state.array.length-1);\n        }\n\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n                if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n\n                    if (animation_type === \"check\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"green\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                    }\n\n                    if (animation_type === \"uncheck\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                    }\n\n                    if (animation_type === \"swap-wrong\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"red\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                    }\n\n                    if (animation_type === \"swap\") {\n                        var temp = temp_array[barOneIdx]\n                        temp_array[barOneIdx] = temp_array[barTwoIdx];\n                        temp_array[barTwoIdx] = temp;\n                    }\n\n                    if (animation_type === \"shift\") {\n                        const movedElement = temp_array.splice(barTwoIdx, 1);\n                        temp_array.splice(barOneIdx, 0, movedElement[0]);\n                    }\n                } else {\n                    if (animation_type === \"check\") {\n                        gridElements[barOneIdx].style.border = \"black 1px solid\";\n                        gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                    }\n\n                    if (animation_type === \"uncheck\") {\n                        gridElements[barOneIdx].style.border = \"white 1px solid\";\n                        gridElements[barTwoIdx].style.border = \"white 1px solid\";\n                    }\n\n                    if (animation_type === \"swap\") {\n                        var temp_two = temp_array[barOneIdx]\n                        temp_array[barOneIdx] = temp_array[barTwoIdx];\n                        temp_array[barTwoIdx] = temp_two;\n                    }\n\n                    if (animation_type === \"shift\") {\n                        const movedElement = temp_array.splice(barTwoIdx, 1);\n                        temp_array.splice(barOneIdx, 0, movedElement[0]);\n                    }\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * 30);\n        }\n    }\n\n    render () {\n        const windowHeight = this.state.windowHeight\n        const visualizerHeight = windowHeight - 140;\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                    />\n                <div className=\"sorting-grid\" style={{height: visualizerHeight}}>\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}