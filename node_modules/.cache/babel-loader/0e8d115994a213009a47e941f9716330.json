{"ast":null,"code":"// First write the swap function, which is just a helper function to swap values of the array.\nfunction swap(array, i, j) {\n  var temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nfunction quicksortLomuto(array, left, right) {\n  var _;\n\n  var animationsQuickSort = [];\n  var animationsLeft = [];\n  var animationsRight = [];\n  var animationsPartition = [];\n  left = left || 0;\n  right = right || array.length - 1;\n  var pivot = partitionLomuto(array, left, right);\n\n  if (left < pivot - 1) {\n    quicksortLomuto(array, left, pivot - 1);\n  }\n\n  if (right > pivot) {\n    quicksortLomuto(array, pivot - 1, right);\n  }\n\n  animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n  return array;\n}\n\nfunction partitionLomuto(array, left, right) {\n  // Lomuto algorithm always uses the last element, array[right], for the pivot.\n  var pivot = right;\n  var i = left;\n  /*The logic under Lomuto is, we start from the leftmost element and keep track of index of smaller (or equal to) elements as j. While traversing, if we find a smaller element, we swap current element with arr[j]. Otherwise we ignore current element.*/\n\n  for (var j = left; j < right; j++) {\n    if (array[j] <= array[pivot]) {\n      swap(array, i, j);\n      i++;\n    }\n  }\n\n  swap(array, i, j);\n  return i;\n}\n\nexport default quicksortLomuto;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/quickSortLomunto.js"],"names":["swap","array","i","j","temp","quicksortLomuto","left","right","_","animationsQuickSort","animationsLeft","animationsRight","animationsPartition","length","pivot","partitionLomuto"],"mappings":"AACA;AACA,SAASA,IAAT,CAAcC,KAAd,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,MAAIC,IAAI,GAAGH,KAAK,CAACC,CAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,EAAAA,KAAK,CAACE,CAAD,CAAL,GAAWC,IAAX;AACH;;AAED,SAASC,eAAT,CAAyBJ,KAAzB,EAAgCK,IAAhC,EAAsCC,KAAtC,EAA6C;AACzC,MAAIC,CAAJ;;AACA,MAAIC,mBAAmB,GAAG,EAA1B;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,mBAAmB,GAAG,EAA1B;AACAN,EAAAA,IAAI,GAAGA,IAAI,IAAI,CAAf;AACAC,EAAAA,KAAK,GAAGA,KAAK,IAAIN,KAAK,CAACY,MAAN,GAAe,CAAhC;AAEA,MAAIC,KAAK,GAAGC,eAAe,CAACd,KAAD,EAAQK,IAAR,EAAcC,KAAd,CAA3B;;AAEA,MAAID,IAAI,GAAGQ,KAAK,GAAG,CAAnB,EAAsB;AAClBT,IAAAA,eAAe,CAACJ,KAAD,EAAQK,IAAR,EAAcQ,KAAK,GAAG,CAAtB,CAAf;AACH;;AAED,MAAIP,KAAK,GAAGO,KAAZ,EAAmB;AACfT,IAAAA,eAAe,CAACJ,KAAD,EAAQa,KAAK,GAAG,CAAhB,EAAmBP,KAAnB,CAAf;AACH;;AAEDE,EAAAA,mBAAmB,GAAG,CAAC,GAAGG,mBAAJ,EAAyB,GAAGD,eAA5B,EAA6C,GAAGD,cAAhD,CAAtB;AAEA,SAAOT,KAAP;AACH;;AAED,SAASc,eAAT,CAAyBd,KAAzB,EAAgCK,IAAhC,EAAsCC,KAAtC,EAA6C;AACzC;AACA,MAAIO,KAAK,GAAGP,KAAZ;AACA,MAAIL,CAAC,GAAGI,IAAR;AAEA;;AACA,OAAK,IAAIH,CAAC,GAAGG,IAAb,EAAmBH,CAAC,GAAGI,KAAvB,EAA8BJ,CAAC,EAA/B,EAAmC;AAC/B,QAAIF,KAAK,CAACE,CAAD,CAAL,IAAYF,KAAK,CAACa,KAAD,CAArB,EAA8B;AAC1Bd,MAAAA,IAAI,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,CAAJ;AACAD,MAAAA,CAAC;AACJ;AACJ;;AACDF,EAAAA,IAAI,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,CAAJ;AACA,SAAOD,CAAP;AACH;;AAED,eAAeG,eAAf","sourcesContent":["\n// First write the swap function, which is just a helper function to swap values of the array.\nfunction swap(array, i, j) {\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n\nfunction quicksortLomuto(array, left, right) {\n    var _;\n    var animationsQuickSort = []\n    var animationsLeft = [];\n    var animationsRight = [];\n    var animationsPartition = [];\n    left = left || 0;\n    right = right || array.length - 1;\n\n    var pivot = partitionLomuto(array, left, right);\n\n    if (left < pivot - 1) {\n        quicksortLomuto(array, left, pivot - 1);\n    }\n\n    if (right > pivot) {\n        quicksortLomuto(array, pivot - 1, right)\n    }\n\n    animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n\n    return array;\n}\n\nfunction partitionLomuto(array, left, right) {\n    // Lomuto algorithm always uses the last element, array[right], for the pivot.\n    var pivot = right;\n    var i = left;\n\n    /*The logic under Lomuto is, we start from the leftmost element and keep track of index of smaller (or equal to) elements as j. While traversing, if we find a smaller element, we swap current element with arr[j]. Otherwise we ignore current element.*/\n    for (var j = left; j < right; j++) {\n        if (array[j] <= array[pivot]) {\n            swap(array, i, j);\n            i++\n        }\n    }\n    swap(array, i, j);\n    return i;\n}\n\nexport default quicksortLomuto;"]},"metadata":{},"sourceType":"module"}