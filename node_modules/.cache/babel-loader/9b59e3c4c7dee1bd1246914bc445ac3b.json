{"ast":null,"code":"function mergeArrays(a, b) {\n  const c = [];\n\n  while (a.length && b.length) {\n    c.push(a[0] > b[0] ? b.shift() : a.shift());\n  } //if we still have values, let's add them at the end of `c`\n\n\n  while (a.length) {\n    c.push(a.shift());\n  }\n\n  while (b.length) {\n    c.push(b.shift());\n  }\n\n  return c;\n}\n\nfunction mergeSort(a) {\n  if (a.length < 2) return a;\n  const middle = Math.floor(a.length / 2);\n  const a_l = a.slice(0, middle);\n  const a_r = a.slice(middle, a.length);\n  const sorted_l = mergeSort(a_l);\n  const sorted_r = mergeSort(a_r);\n  return mergeArrays(sorted_l, sorted_r);\n} // function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n// }\n\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/merge_sort.js"],"names":["mergeArrays","a","b","c","length","push","shift","mergeSort","middle","Math","floor","a_l","slice","a_r","sorted_l","sorted_r"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,QAAMC,CAAC,GAAG,EAAV;;AAEA,SAAOF,CAAC,CAACG,MAAF,IAAYF,CAAC,CAACE,MAArB,EAA6B;AAC3BD,IAAAA,CAAC,CAACE,IAAF,CAAOJ,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAACI,KAAF,EAAd,GAA0BL,CAAC,CAACK,KAAF,EAAjC;AACD,GALsB,CAOvB;;;AACA,SAAOL,CAAC,CAACG,MAAT,EAAiB;AACfD,IAAAA,CAAC,CAACE,IAAF,CAAOJ,CAAC,CAACK,KAAF,EAAP;AACD;;AACD,SAAOJ,CAAC,CAACE,MAAT,EAAiB;AACfD,IAAAA,CAAC,CAACE,IAAF,CAAOH,CAAC,CAACI,KAAF,EAAP;AACD;;AAED,SAAOH,CAAP;AACH;;AAED,SAASI,SAAT,CAAmBN,CAAnB,EAAsB;AAClB,MAAIA,CAAC,CAACG,MAAF,GAAW,CAAf,EAAkB,OAAOH,CAAP;AAClB,QAAMO,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWT,CAAC,CAACG,MAAF,GAAW,CAAtB,CAAf;AACA,QAAMO,GAAG,GAAGV,CAAC,CAACW,KAAF,CAAQ,CAAR,EAAWJ,MAAX,CAAZ;AACA,QAAMK,GAAG,GAAGZ,CAAC,CAACW,KAAF,CAAQJ,MAAR,EAAgBP,CAAC,CAACG,MAAlB,CAAZ;AACA,QAAMU,QAAQ,GAAGP,SAAS,CAACI,GAAD,CAA1B;AACA,QAAMI,QAAQ,GAAGR,SAAS,CAACM,GAAD,CAA1B;AACA,SAAOb,WAAW,CAACc,QAAD,EAAWC,QAAX,CAAlB;AACD,C,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;AAEA,eAAeR,SAAf","sourcesContent":["function mergeArrays(a, b) {\n    const c = []\n  \n    while (a.length && b.length) {\n      c.push(a[0] > b[0] ? b.shift() : a.shift())\n    }\n  \n    //if we still have values, let's add them at the end of `c`\n    while (a.length) {\n      c.push(a.shift())\n    }\n    while (b.length) {\n      c.push(b.shift())\n    }\n  \n    return c\n}\n\nfunction mergeSort(a) {\n    if (a.length < 2) return a\n    const middle = Math.floor(a.length / 2)\n    const a_l = a.slice(0, middle)\n    const a_r = a.slice(middle, a.length)\n    const sorted_l = mergeSort(a_l)\n    const sorted_r = mergeSort(a_r)\n    return mergeArrays(sorted_l, sorted_r)\n  }\n  \n// function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n\n// }\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}