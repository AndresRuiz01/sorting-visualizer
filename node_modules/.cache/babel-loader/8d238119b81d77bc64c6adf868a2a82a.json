{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/sorting-visualizer/src/components/sorting_visualizer/SortingVisualizer.js\";\nimport './SortingVisualizer.css';\nimport React from 'react';\nimport GridElement from '../grid_element/GridElement';\nimport bubbleSort from '../../sorting_algorithms/bubbleSort';\nimport quickSortHoare from '../../sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from '../../sorting_algorithms/quickSortLomunto';\nimport mergeSort from '../../sorting_algorithms/mergeSort';\nimport selectionSort from '../../sorting_algorithms/selectionSort';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { visualizationTypes } from '../../enums/visualizationTypes';\nimport { sortingAlgorithms } from '../../enums/sortingAlgorithms';\nimport Header from '../header/header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\n\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\n\nconst SORTING_SPEED_IN_MS = 30; // Time between each animations\n\nconst VISUALIZE_COMPARISONS = true; // Boolean to color the bars being compared / swapped and the pivots\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: sortingAlgorithms.BUBBLE_SORT,\n      visualizationType: visualizationTypes.BAR_HEIGHT,\n      windowHeight: window.innerHeight,\n      loadingBarProgress: 0,\n      isSorting: false\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateNewArray();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize(e) {\n    this.setState({\n      windowHeight: window.innerHeight\n    });\n    this.generateNewArray();\n  }\n\n  sleep(ms) {\n    new Promise(resolve => setTimeout(resolve, ms));\n    console.log(\"here\");\n  }\n  /*\n  Method used to update the state based on the sorting algorithm dropdown\n  */\n\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  /*\n  Method used to update the state based on the visualization type\n  */\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    }, () => {\n      this.generateNewArray();\n    });\n  }\n\n  /*\n  Method to generate a random integer that is used for the heights of the bars\n  */\n  getRandomInt() {\n    const windowHeight = this.state.windowHeight;\n    const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n    const min = 30;\n    const max = maxBarHeight;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  /*\n  Method used to generate an array of elements with random heights\n  */\n\n\n  generateHeightArray() {\n    var new_array = [];\n\n    for (var i = 0; i < NUM_BARS; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: height,\n        element_height: height,\n        color: \"#282c34\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n  }\n  /*\n  Method used to shuffle the sorted list of colored elements\n  */\n\n\n  shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n  /*\n  Method to generate an array of colored elements using the HSL color scheme\n  */\n\n\n  generateColoredArray() {\n    const windowHeight = this.state.windowHeight;\n    const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n    var new_array = [];\n\n    for (var i = 0; i < NUM_BARS; i++) {\n      var value = i * 3;\n      var hsl_string = \"hsl(\" + value + \",60%,70%)\";\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: value,\n        element_height: maxBarHeight,\n        color: hsl_string\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 28\n      }, this));\n    }\n\n    new_array = this.shuffle(new_array);\n    this.setState({\n      array: new_array\n    });\n  }\n  /*\n  Method to generate a new array based on the visualization type\n  */\n\n\n  generateNewArray() {\n    this.setState({\n      loadingBarProgress: 0\n    });\n\n    if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n      this.generateHeightArray();\n    } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n      this.generateColoredArray();\n    }\n  }\n  /*\n  Method to remove all of the non swap visualizations\n  */\n\n\n  visualizeSwapOnly(animations) {\n    var swapAnimations = [];\n\n    for (let i = 0; i < animations.length; i++) {\n      if (animations[i][0] === \"swap\") {\n        swapAnimations.push(animations[i]);\n      }\n    }\n\n    return swapAnimations;\n  }\n  /*\n  Method used to visualize sorting algorithm with bar height\n  */\n\n\n  async barHeightVisualization(animations) {\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"cyan\";\n          gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n        } else if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n        } else if (animation_type === \"swap\") {\n          var temp = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp;\n        } else if (animation_type === \"shift\") {\n          const movedElement = temp_array.splice(barTwoIdx, 1);\n          temp_array.splice(barOneIdx, 0, movedElement[0]);\n        } else if (animation_type === \"uncheck-check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n        } else if (animation_type === \"pivot-select\") {\n          gridElements[barOneIdx].style.backgroundColor = \"red\";\n        } else if (animation_type === \"pivot-deselect\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n        } else if (animation_type === \"correct\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n        }\n\n        this.setState({\n          array: temp_array\n        });\n        var progress = Math.floor(i / animations.length * 100) + 1;\n        this.setState({\n          loadingBarProgress: progress\n        });\n      }, i * SORTING_SPEED_IN_MS);\n    }\n  }\n  /*\n  Method used to visualize sorting algorithm with color\n  */\n\n\n  colorVisualization(animations) {\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.border = \"black 1px solid\";\n          gridElements[barTwoIdx].style.border = \"black 1px solid\";\n        } else if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.border = \"white 1px solid\";\n          gridElements[barTwoIdx].style.border = \"white 1px solid\";\n        } else if (animation_type === \"swap\") {\n          var temp_two = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp_two;\n        } else if (animation_type === \"shift\") {\n          const movedElement = temp_array.splice(barTwoIdx, 1);\n          temp_array.splice(barOneIdx, 0, movedElement[0]);\n        } else if (animation_type === \"uncheck-check\") {\n          gridElements[barOneIdx].style.border = \"white 1px solid\";\n          gridElements[barTwoIdx].style.border = \"black 1px solid\";\n        }\n\n        this.setState({\n          array: temp_array\n        });\n        var progress = Math.floor((i + 1) / animations.length * 100);\n        this.setState({\n          loadingBarProgress: progress\n        });\n      }, i * SORTING_SPEED_IN_MS);\n    }\n  }\n  /*\n  Method to visualize the sorting process of the selected algorithm using the selected visualization\n  */\n\n\n  sortElements() {\n    if (this.state.isSorting) {\n      return;\n    }\n\n    this.setState({\n      isSorting: true\n    });\n    var animations = [];\n\n    var _;\n\n    if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n      animations = bubbleSort(this.state.array.slice());\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n      [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n      [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n      animations = mergeSort(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.SELECTION_SORT) {\n      animations = selectionSort(this.state.array.slice());\n    }\n\n    if (!VISUALIZE_COMPARISONS) {\n      animations = this.visualizeSwapOnly(animations);\n    }\n\n    if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n      this.barHeightVisualization(animations);\n    } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n      this.colorVisualization(animations);\n    }\n\n    this.sleep(SORTING_SPEED_IN_MS * animations.length);\n    console.log(\"here\");\n    this.setState({\n      isSorting: false\n    });\n  }\n\n  render() {\n    const windowHeight = this.state.windowHeight;\n    const visualizerHeight = windowHeight - HEADER_DIFFERENCE;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateNewArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm,\n        updateSelectedVisualizationType: this.updateSelectedVisualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        completed: this.state.loadingBarProgress,\n        borderRadius: \"0px\",\n        customLabel: \" \",\n        height: \"5px\",\n        bgColor: \"red\",\n        baseBgColor: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        style: {\n          height: visualizerHeight\n        },\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/sorting-visualizer/src/components/sorting_visualizer/SortingVisualizer.js"],"names":["React","GridElement","bubbleSort","quickSortHoare","quickSortLomunto","mergeSort","selectionSort","ProgressBar","visualizationTypes","sortingAlgorithms","Header","NUM_BARS","HEADER_DIFFERENCE","SORTING_SPEED_IN_MS","VISUALIZE_COMPARISONS","SortingVisualizer","Component","constructor","props","state","array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","windowHeight","window","innerHeight","loadingBarProgress","isSorting","generateNewArray","bind","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","handleResize","componentDidMount","addEventListener","componentWillUnmount","e","setState","sleep","ms","Promise","resolve","setTimeout","console","log","target","value","getRandomInt","maxBarHeight","min","max","Math","floor","random","generateHeightArray","new_array","i","height","push","shuffle","currentIndex","length","randomIndex","generateColoredArray","hsl_string","COLOR","visualizeSwapOnly","animations","swapAnimations","barHeightVisualization","temp_array","slice","gridElements","document","getElementsByClassName","animation_type","barOneIdx","barTwoIdx","style","backgroundColor","temp","movedElement","splice","progress","colorVisualization","border","temp_two","_","QUICK_SORT_HOARE","QUICK_SORT_LOMUNTO","MERGE_SORT","SELECTION_SORT","render","visualizerHeight"],"mappings":"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","sourcesContent":["import './SortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from '../grid_element/GridElement';\n\nimport bubbleSort from '../../sorting_algorithms/bubbleSort';\nimport quickSortHoare from '../../sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from '../../sorting_algorithms/quickSortLomunto';\nimport mergeSort from '../../sorting_algorithms/mergeSort';\nimport selectionSort from '../../sorting_algorithms/selectionSort';\n\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\nimport { visualizationTypes } from '../../enums/visualizationTypes';\nimport { sortingAlgorithms } from '../../enums/sortingAlgorithms';\n\nimport Header from '../header/header'\n\n\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\nconst SORTING_SPEED_IN_MS = 30; // Time between each animations\nconst VISUALIZE_COMPARISONS = true; // Boolean to color the bars being compared / swapped and the pivots\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n            windowHeight: window.innerHeight,\n            loadingBarProgress: 0,\n            isSorting: false,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n    \n    componentDidMount() {\n        this.generateNewArray();\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    handleResize(e) {\n        this.setState({windowHeight: window.innerHeight});\n        this.generateNewArray();\n    }\n    \n    sleep(ms) {\n        new Promise(resolve => setTimeout(resolve, ms));\n        console.log(\"here\")\n    }\n\n    /*\n    Method used to update the state based on the sorting algorithm dropdown\n    */\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    /*\n    Method used to update the state based on the visualization type\n    */\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value}, () => {this.generateNewArray();});\n    };\n\n    /*\n    Method to generate a random integer that is used for the heights of the bars\n    */\n    getRandomInt() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        const min = 30;\n        const max = maxBarHeight;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /*\n    Method used to generate an array of elements with random heights\n    */\n    generateHeightArray() {\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={height} element_height={height} color={\"#282c34\"}/>);\n        }\n        this.setState({array: new_array});\n    }\n\n    /*\n    Method used to shuffle the sorted list of colored elements\n    */\n    shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n\n    /*\n    Method to generate an array of colored elements using the HSL color scheme\n    */\n    generateColoredArray() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var value = i * 3;\n            var hsl_string = \"hsl(\"+value+\",60%,70%)\";\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={value} element_height={maxBarHeight} color={hsl_string} />);\n        }\n        new_array = this.shuffle(new_array); \n        this.setState({array: new_array});\n    }\n\n    /*\n    Method to generate a new array based on the visualization type\n    */\n    generateNewArray() {\n        this.setState({loadingBarProgress: 0});\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.generateHeightArray();\n        } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n            this.generateColoredArray();\n        }\n    }\n\n    /*\n    Method to remove all of the non swap visualizations\n    */\n    visualizeSwapOnly(animations) {\n        var swapAnimations = [];\n\n        for (let i = 0; i < animations.length; i++) {\n            if (animations[i][0] === \"swap\") {\n                swapAnimations.push(animations[i]);\n            }\n        }\n        return swapAnimations;\n    }\n\n    /*\n    Method used to visualize sorting algorithm with bar height\n    */\n    async barHeightVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n                if (animation_type === \"check\") { \n                    gridElements[barOneIdx].style.backgroundColor = \"cyan\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"pivot-select\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                } else if (animation_type === \"pivot-deselect\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"correct\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i) / animations.length) * 100) + 1;\n                this.setState({loadingBarProgress: progress});\n\n            }, i * SORTING_SPEED_IN_MS);\n        }\n    }\n\n    /*\n    Method used to visualize sorting algorithm with color\n    */\n    colorVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.border = \"black 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"white 1px solid\";\n                } else if (animation_type === \"swap\") {\n                    var temp_two = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp_two;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i + 1) / animations.length) * 100);\n                this.setState({loadingBarProgress: progress});\n            }, i * SORTING_SPEED_IN_MS);\n        }\n    }\n\n    /*\n    Method to visualize the sorting process of the selected algorithm using the selected visualization\n    */\n    sortElements() {\n        if (this.state.isSorting) {\n            return;\n        }\n\n        this.setState({isSorting: true});\n\n        var animations = [];\n        var _;\n        if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n            animations = bubbleSort(this.state.array.slice());\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n            [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n            [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n            animations = mergeSort(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.SELECTION_SORT) {\n            animations = selectionSort(this.state.array.slice());\n        }\n\n        if (!VISUALIZE_COMPARISONS) {\n            animations = this.visualizeSwapOnly(animations);\n        }\n\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.barHeightVisualization(animations);\n        } else if (this.state.visualizationType === visualizationTypes.COLOR){\n            this.colorVisualization(animations);\n        }\n        this.sleep(SORTING_SPEED_IN_MS * animations.length);\n        console.log(\"here\");\n        this.setState({isSorting: false});\n    }\n\n    render () {\n        const windowHeight = this.state.windowHeight\n        const visualizerHeight = windowHeight - HEADER_DIFFERENCE;\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                />\n                <ProgressBar completed={this.state.loadingBarProgress} borderRadius=\"0px\" customLabel=\" \" height=\"5px\" bgColor=\"red\" baseBgColor=\"white\"/>\n                <div className=\"sorting-grid\" style={{height: visualizerHeight}}>\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}