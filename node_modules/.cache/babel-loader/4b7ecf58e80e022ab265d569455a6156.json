{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport getBogoSortAnimations from './sorting_algorithms/bogo_sort';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUBBLE_SORT = 'bubble';\nconst HEAP_SORT = 'heap';\nconst QUICK_SORT = 'quick';\nconst BOGO_SORT = 'bogo';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      starting_array: [],\n      algorithm: 'Bubble Sort',\n      visualizationType: 'Bar Height'\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const min = 30;\n    const max = 500;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    var new_array = [];\n\n    for (var i = 0; i < this.state.size; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        element_height: height,\n        style: {\n          backgroundColor: \"#282c34\"\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n    this.setState({\n      starting_array: new_array\n    });\n  } // Test function to print bar heights\n\n\n  printHeights(array_print) {\n    var num_array = [];\n\n    for (let i = 0; i < array_print.length; i++) {\n      num_array.push(array_print[i].props.element_height);\n    }\n\n    console.log(num_array);\n  } // Test function to get height of bar\n\n\n  getElementHeight(element) {\n    return element.props.element_height;\n  }\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    });\n  }\n\n  sortElements() {\n    var animations = getBubbleSortAnimations(this.state.array.slice());\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"green\";\n          gridElements[barTwoIdx].style.backgroundColor = \"green\"; // barOne.props.style.backgroundColor = \"#ffffff\";\n          // barTwo.props.style.backgroundColor = \"#ffffff\";\n          // console.log(barOne);\n        }\n\n        if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n        }\n\n        if (animation_type === \"swap-wrong\") {\n          gridElements[barOneIdx].style.backgroundColor = \"red\";\n          gridElements[barTwoIdx].style.backgroundColor = \"red\";\n        }\n\n        if (animation_type === \"swap\") {\n          var temp = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp;\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * this.state.speed);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateNewArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["React","GridElement","getBubbleSortAnimations","getBogoSortAnimations","Header","BUBBLE_SORT","HEAP_SORT","QUICK_SORT","BOGO_SORT","SortingVisualizer","Component","constructor","props","state","array","starting_array","algorithm","visualizationType","generateNewArray","bind","sortElements","updateSelectedAlgorithm","componentDidMount","getRandomInt","min","max","Math","floor","random","new_array","i","size","height","push","backgroundColor","setState","printHeights","array_print","num_array","length","element_height","console","log","getElementHeight","element","e","target","value","updateSelectedVisualizationType","animations","slice","temp_array","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","temp","speed","render"],"mappings":"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","sourcesContent":["import './sortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport Header from './header'\nimport './App.css';\n\nconst BUBBLE_SORT = 'bubble';\nconst HEAP_SORT = 'heap';\nconst QUICK_SORT = 'quick';\nconst BOGO_SORT = 'bogo';\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            starting_array: [],\n            algorithm: 'Bubble Sort',\n            visualizationType: 'Bar Height',\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const min = 30;\n        const max = 500;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        var new_array = [];\n        for (var i = 0; i < this.state.size; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} element_height={height} style={{backgroundColor: \"#282c34\"}} />);\n        }\n        this.setState({array: new_array});\n        this.setState({starting_array: new_array});\n\n    }\n\n    // Test function to print bar heights\n    printHeights(array_print) {\n        var num_array = [];\n        for(let i = 0; i < array_print.length; i++) {\n            num_array.push(array_print[i].props.element_height);\n        }\n        console.log(num_array);\n    }\n\n    // Test function to get height of bar\n    getElementHeight(element) {\n        return element.props.element_height;\n    }\n    \n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value});\n    };\n    sortElements() {\n        var animations = getBubbleSortAnimations(this.state.array.slice());\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"green\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                    // barOne.props.style.backgroundColor = \"#ffffff\";\n                    // barTwo.props.style.backgroundColor = \"#ffffff\";\n                    // console.log(barOne);\n                }\n\n                if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                }\n\n                if (animation_type === \"swap-wrong\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                }\n\n                if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * this.state.speed);\n        }\n    }\n\n    render () {\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    />\n                <div className=\"sorting-grid\">\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}