{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport { RangeStepInput } from 'react-range-step-input';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport getBogoSortAnimations from './sorting_algorithms/bogo_sort';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUBBLE_SORT = 'bubble';\nconst HEAP_SORT = 'heap';\nconst QUICK_SORT = 'quick';\nconst BOGO_SORT = 'bogo';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateAlgorithm = event => {\n      this.setState({\n        algorithm: event.target.value\n      });\n    };\n\n    this.state = {\n      array: [],\n      starting_array: [],\n      size: 27,\n      speed: 250,\n      algorithm: 'Bubble Sort'\n    };\n    this.onSizeChange = this.onSizeChange.bind(this);\n    this.onSpeedChange = this.onSpeedChange.bind(this);\n    this.generateNewArray = this.generateNewArray.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n  } // Function to update the size property\n\n\n  onSizeChange(e) {\n    const newVal = e.target.value;\n    this.setState({\n      size: newVal\n    }, () => {\n      this.generateNewArray();\n    });\n  } // Function to update the speed property\n\n\n  onSpeedChange(e) {\n    const newVal = e.target.value;\n    this.setState({\n      speed: newVal\n    });\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const min = 30;\n    const max = 500;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    var new_array = [];\n\n    for (var i = 0; i < this.state.size; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        element_height: height,\n        style: {\n          backgroundColor: \"#282c34\"\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n    this.setState({\n      starting_array: new_array\n    });\n  } // Test function to print bar heights\n\n\n  printHeights(array_print) {\n    var num_array = [];\n\n    for (let i = 0; i < array_print.length; i++) {\n      num_array.push(array_print[i].props.element_height);\n    }\n\n    console.log(num_array);\n  } // Test function to get height of bar\n\n\n  getElementHeight(element) {\n    return element.props.element_height;\n  }\n\n  sortElements() {\n    var animations = getBubbleSortAnimations(this.state.array.slice());\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n        const barOne = temp_array[barOneIdx];\n        const barTwo = temp_array[barOneIdx];\n\n        if (animation_type === \"check\") {\n          gridElements[barOneIdx].style.backgroundColor = \"green\";\n          gridElements[barTwoIdx].style.backgroundColor = \"green\"; // barOne.props.style.backgroundColor = \"#ffffff\";\n          // barTwo.props.style.backgroundColor = \"#ffffff\";\n          // console.log(barOne);\n        }\n\n        if (animation_type === \"uncheck\") {\n          gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n          gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n        }\n\n        if (animation_type === \"swap-wrong\") {\n          gridElements[barOneIdx].style.backgroundColor = \"red\";\n          gridElements[barTwoIdx].style.backgroundColor = \"red\";\n        }\n\n        if (animation_type === \"swap-right\") {\n          var temp = temp_array[barOneIdx];\n          temp_array[barOneIdx] = temp_array[barTwoIdx];\n          temp_array[barTwoIdx] = temp;\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * this.state.speed);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        size: this.state.size,\n        speed: this.state.speed,\n        onSizeChange: this.onSizeChange,\n        onSpeedChange: this.onSpeedChange,\n        generateNewArray: this.generateNewArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["RangeStepInput","React","GridElement","InputLabel","MenuItem","FormControl","Select","makeStyles","getBubbleSortAnimations","getBogoSortAnimations","Header","BUBBLE_SORT","HEAP_SORT","QUICK_SORT","BOGO_SORT","SortingVisualizer","Component","constructor","props","updateAlgorithm","event","setState","algorithm","target","value","state","array","starting_array","size","speed","onSizeChange","bind","onSpeedChange","generateNewArray","componentDidMount","e","newVal","getRandomInt","min","max","Math","floor","random","new_array","i","height","push","backgroundColor","printHeights","array_print","num_array","length","element_height","console","log","getElementHeight","element","sortElements","animations","slice","temp_array","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","barOne","barTwo","style","temp","render"],"mappings":"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","sourcesContent":["import './sortingVisualizer.css';\nimport {RangeStepInput} from 'react-range-step-input';\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport Header from './header'\nimport './App.css';\n\nconst BUBBLE_SORT = 'bubble';\nconst HEAP_SORT = 'heap';\nconst QUICK_SORT = 'quick';\nconst BOGO_SORT = 'bogo';\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            starting_array: [],\n            size: 27,\n            speed: 250,\n            algorithm: 'Bubble Sort',\n        }\n\n        this.onSizeChange = this.onSizeChange.bind(this);\n        this.onSpeedChange = this.onSpeedChange.bind(this);\n        this.generateNewArray = this.generateNewArray.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    // Function to update the size property\n    onSizeChange(e) {\n        const newVal = e.target.value;\n        this.setState({size: newVal}, () => {this.generateNewArray();});\n    }\n\n    // Function to update the speed property\n    onSpeedChange(e) {\n        const newVal = e.target.value;\n        this.setState({speed: newVal});\n    }\n\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const min = 30;\n        const max = 500;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        var new_array = [];\n        for (var i = 0; i < this.state.size; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} element_height={height} style={{backgroundColor: \"#282c34\"}} />);\n        }\n        this.setState({array: new_array});\n        this.setState({starting_array: new_array});\n\n    }\n\n    // Test function to print bar heights\n    printHeights(array_print) {\n        var num_array = [];\n        for(let i = 0; i < array_print.length; i++) {\n            num_array.push(array_print[i].props.element_height);\n        }\n        console.log(num_array);\n    }\n\n    // Test function to get height of bar\n    getElementHeight(element) {\n        return element.props.element_height;\n    }\n    \n\n    sortElements() {\n        var animations = getBubbleSortAnimations(this.state.array.slice());\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                const barOne = temp_array[barOneIdx];\n                const barTwo = temp_array[barOneIdx];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"green\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                    // barOne.props.style.backgroundColor = \"#ffffff\";\n                    // barTwo.props.style.backgroundColor = \"#ffffff\";\n                    // console.log(barOne);\n                }\n\n                if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                }\n\n                if (animation_type === \"swap-wrong\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                }\n\n                if (animation_type === \"swap-right\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * this.state.speed);\n        }\n    }\n\n    updateAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n      };\n\n    render () {\n        return (\n            <div className=\"App\">\n                <Header \n                    size={this.state.size} \n                    speed={this.state.speed}\n                    onSizeChange={this.onSizeChange}\n                    onSpeedChange={this.onSpeedChange}\n                    generateNewArray={this.generateNewArray}\n                    />\n                <div className=\"sorting-grid\">\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}