{"ast":null,"code":"import _slicedToArray from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/andres/Desktop/sorting-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import'./SortingVisualizer.css';import React from'react';import GridElement from'../grid_element/GridElement';import bubbleSort from'../../sorting_algorithms/bubbleSort';import quickSortHoare from'../../sorting_algorithms/quickSortHoare';import quickSortLomunto from'../../sorting_algorithms/quickSortLomunto';import mergeSort from'../../sorting_algorithms/mergeSort';import selectionSort from'../../sorting_algorithms/selectionSort';import ProgressBar from\"@ramonak/react-progress-bar\";import{visualizationTypes}from'../../enums/visualizationTypes';import{sortingAlgorithms}from'../../enums/sortingAlgorithms';import Header from'../header/header';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NUM_BARS=90;// Nubmer of desired elements to sort\nvar HEADER_DIFFERENCE=145;// Difference used to correctly size the sorting visualizer\nvar SORTING_SPEED_IN_MS=30;// Time between each animations\nvar VISUALIZE_COMPARISONS=true;// Boolean to color the bars being compared / swapped and the pivots\nvar SortingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(SortingVisualizer,_React$Component);var _super=_createSuper(SortingVisualizer);function SortingVisualizer(props){var _this;_classCallCheck(this,SortingVisualizer);_this=_super.call(this,props);_this.state={array:[],algorithm:sortingAlgorithms.BUBBLE_SORT,visualizationType:visualizationTypes.BAR_HEIGHT,windowHeight:window.innerHeight,loadingBarProgress:0};_this.generateNewArray=_this.generateNewArray.bind(_assertThisInitialized(_this));_this.sortElements=_this.sortElements.bind(_assertThisInitialized(_this));_this.updateSelectedAlgorithm=_this.updateSelectedAlgorithm.bind(_assertThisInitialized(_this));_this.updateSelectedVisualizationType=_this.updateSelectedVisualizationType.bind(_assertThisInitialized(_this));_this.handleResize=_this.handleResize.bind(_assertThisInitialized(_this));return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.generateNewArray();window.addEventListener(\"resize\",this.handleResize);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.addEventListener(\"resize\",this.handleResize);}},{key:\"handleResize\",value:function handleResize(e){this.setState({windowHeight:window.innerHeight});this.generateNewArray();}/*\n    Method used to update the state based on the sorting algorithm dropdown\n    */},{key:\"updateSelectedAlgorithm\",value:function updateSelectedAlgorithm(e){this.setState({algorithm:e.target.value});}},{key:\"updateSelectedVisualizationType\",value:/*\n    Method used to update the state based on the visualization type\n    */function updateSelectedVisualizationType(e){var _this2=this;this.setState({visualizationType:e.target.value},function(){_this2.generateNewArray();});}},{key:\"getRandomInt\",value:/*\n    Method to generate a random integer that is used for the heights of the bars\n    */function getRandomInt(){var windowHeight=this.state.windowHeight;var maxBarHeight=windowHeight-HEADER_DIFFERENCE;var min=30;var max=maxBarHeight;return Math.floor(Math.random()*(max-min+1))+min;}/*\n    Method used to generate an array of elements with random heights\n    */},{key:\"generateHeightArray\",value:function generateHeightArray(){var new_array=[];for(var i=0;i<NUM_BARS;i++){var height=this.getRandomInt();new_array.push(/*#__PURE__*/_jsx(GridElement,{className:\"grid-element\",value:height,element_height:height,color:\"#282c34\"},i));}this.setState({array:new_array});}/*\n    Method used to shuffle the sorted list of colored elements\n    */},{key:\"shuffle\",value:function shuffle(array){var currentIndex=array.length,randomIndex;// While there remain elements to shuffle...\nwhile(currentIndex!==0){// Pick a remaining element...\nrandomIndex=Math.floor(Math.random()*currentIndex);currentIndex--;// And swap it with the current element.\nvar _ref=[array[randomIndex],array[currentIndex]];array[currentIndex]=_ref[0];array[randomIndex]=_ref[1];}return array;}/*\n    Method to generate an array of colored elements using the HSL color scheme\n    */},{key:\"generateColoredArray\",value:function generateColoredArray(){var windowHeight=this.state.windowHeight;var maxBarHeight=windowHeight-HEADER_DIFFERENCE;var new_array=[];for(var i=0;i<NUM_BARS;i++){var value=i*3;var hsl_string=\"hsl(\"+value+\",60%,70%)\";new_array.push(/*#__PURE__*/_jsx(GridElement,{className:\"grid-element\",value:value,element_height:maxBarHeight,color:hsl_string},i));}new_array=this.shuffle(new_array);this.setState({array:new_array});}/*\n    Method to generate a new array based on the visualization type\n    */},{key:\"generateNewArray\",value:function generateNewArray(){this.setState({loadingBarProgress:0});if(this.state.visualizationType===visualizationTypes.BAR_HEIGHT){this.generateHeightArray();}else if(this.state.visualizationType===visualizationTypes.COLOR){this.generateColoredArray();}}/*\n    Method to remove all of the non swap visualizations\n    */},{key:\"visualizeSwapOnly\",value:function visualizeSwapOnly(animations){var swapAnimations=[];for(var i=0;i<animations.length;i++){if(animations[i][0]===\"swap\"){swapAnimations.push(animations[i]);}}return swapAnimations;}/*\n    Method used to visualize sorting algorithm with bar height\n    */},{key:\"barHeightVisualization\",value:function barHeightVisualization(animations){var _this3=this;var temp_array=this.state.array.slice();var _loop=function _loop(i){var gridElements=document.getElementsByClassName('grid-element');setTimeout(function(){var _animations$i=_slicedToArray(animations[i],3),animation_type=_animations$i[0],barOneIdx=_animations$i[1],barTwoIdx=_animations$i[2];if(animation_type===\"check\"){gridElements[barOneIdx].style.backgroundColor=\"cyan\";gridElements[barTwoIdx].style.backgroundColor=\"cyan\";}else if(animation_type===\"uncheck\"){gridElements[barOneIdx].style.backgroundColor=\"#282c34\";gridElements[barTwoIdx].style.backgroundColor=\"#282c34\";}else if(animation_type===\"swap\"){var temp=temp_array[barOneIdx];temp_array[barOneIdx]=temp_array[barTwoIdx];temp_array[barTwoIdx]=temp;}else if(animation_type===\"shift\"){var movedElement=temp_array.splice(barTwoIdx,1);temp_array.splice(barOneIdx,0,movedElement[0]);}else if(animation_type===\"uncheck-check\"){gridElements[barOneIdx].style.backgroundColor=\"#282c34\";gridElements[barTwoIdx].style.backgroundColor=\"cyan\";}else if(animation_type===\"pivot-select\"){gridElements[barOneIdx].style.backgroundColor=\"red\";}else if(animation_type===\"pivot-deselect\"){gridElements[barOneIdx].style.backgroundColor=\"#282c34\";}else if(animation_type===\"correct\"){gridElements[barOneIdx].style.backgroundColor=\"#282c34\";}_this3.setState({array:temp_array});var progress=Math.floor(i/animations.length*100)+1;_this3.setState({loadingBarProgress:progress});},i*30);};for(var i=0;i<animations.length;i++){_loop(i);}}/*\n    Method used to visualize sorting algorithm with color\n    */},{key:\"colorVisualization\",value:function colorVisualization(animations){var _this4=this;var temp_array=this.state.array.slice();var _loop2=function _loop2(i){var gridElements=document.getElementsByClassName('grid-element');setTimeout(function(){var _animations$i2=_slicedToArray(animations[i],3),animation_type=_animations$i2[0],barOneIdx=_animations$i2[1],barTwoIdx=_animations$i2[2];if(animation_type===\"check\"){gridElements[barOneIdx].style.border=\"black 1px solid\";gridElements[barTwoIdx].style.border=\"black 1px solid\";}else if(animation_type===\"uncheck\"){gridElements[barOneIdx].style.border=\"white 1px solid\";gridElements[barTwoIdx].style.border=\"white 1px solid\";}else if(animation_type===\"swap\"){var temp_two=temp_array[barOneIdx];temp_array[barOneIdx]=temp_array[barTwoIdx];temp_array[barTwoIdx]=temp_two;}else if(animation_type===\"shift\"){var movedElement=temp_array.splice(barTwoIdx,1);temp_array.splice(barOneIdx,0,movedElement[0]);}else if(animation_type===\"uncheck-check\"){gridElements[barOneIdx].style.border=\"white 1px solid\";gridElements[barTwoIdx].style.border=\"black 1px solid\";}_this4.setState({array:temp_array});var progress=Math.floor((i+1)/animations.length*100);_this4.setState({loadingBarProgress:progress});},i*SORTING_SPEED_IN_MS);};for(var i=0;i<animations.length;i++){_loop2(i);}}/*\n    Method to visualize the sorting process of the selected algorithm using the selected visualization\n    */},{key:\"sortElements\",value:function sortElements(){var animations=[];var _;if(this.state.algorithm===sortingAlgorithms.BUBBLE_SORT){animations=bubbleSort(this.state.array.slice());}else if(this.state.algorithm===sortingAlgorithms.QUICK_SORT_HOARE){var _quickSortHoare=quickSortHoare(this.state.array.slice(),0,this.state.array.length-1);var _quickSortHoare2=_slicedToArray(_quickSortHoare,2);_=_quickSortHoare2[0];animations=_quickSortHoare2[1];}else if(this.state.algorithm===sortingAlgorithms.QUICK_SORT_LOMUNTO){var _quickSortLomunto=quickSortLomunto(this.state.array.slice(),0,this.state.array.length-1);var _quickSortLomunto2=_slicedToArray(_quickSortLomunto,2);_=_quickSortLomunto2[0];animations=_quickSortLomunto2[1];}else if(this.state.algorithm===sortingAlgorithms.MERGE_SORT){animations=mergeSort(this.state.array.slice(),0,this.state.array.length-1);}else if(this.state.algorithm===sortingAlgorithms.SELECTION_SORT){animations=selectionSort(this.state.array.slice());}if(!VISUALIZE_COMPARISONS){animations=this.visualizeSwapOnly(animations);}if(this.state.visualizationType===visualizationTypes.BAR_HEIGHT){this.barHeightVisualization(animations);}else if(this.state.visualizationType===visualizationTypes.COLOR){this.colorVisualization(animations);}}},{key:\"render\",value:function render(){var windowHeight=this.state.windowHeight;var visualizerHeight=windowHeight-HEADER_DIFFERENCE;return/*#__PURE__*/_jsxs(\"div\",{className:\"sorting-visualizer\",children:[/*#__PURE__*/_jsx(Header,{algorithm:this.state.algorithm,visualizationType:this.state.visualizationType,generateNewArray:this.generateNewArray,sortElements:this.sortElements,updateSelectedAlgorithm:this.updateSelectedAlgorithm,updateSelectedVisualizationType:this.updateSelectedVisualizationType}),/*#__PURE__*/_jsx(ProgressBar,{completed:this.state.loadingBarProgress,borderRadius:\"0px\",customLabel:\" \",height:\"5px\",bgColor:\"red\",baseBgColor:\"white\"}),/*#__PURE__*/_jsx(\"div\",{className:\"sorting-grid\",style:{height:visualizerHeight},children:this.state.array})]});}}]);return SortingVisualizer;}(React.Component);export default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/sorting-visualizer/src/components/sorting_visualizer/SortingVisualizer.js"],"names":["React","GridElement","bubbleSort","quickSortHoare","quickSortLomunto","mergeSort","selectionSort","ProgressBar","visualizationTypes","sortingAlgorithms","Header","NUM_BARS","HEADER_DIFFERENCE","SORTING_SPEED_IN_MS","VISUALIZE_COMPARISONS","SortingVisualizer","props","state","array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","windowHeight","window","innerHeight","loadingBarProgress","generateNewArray","bind","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","handleResize","addEventListener","e","setState","target","value","maxBarHeight","min","max","Math","floor","random","new_array","i","height","getRandomInt","push","currentIndex","length","randomIndex","hsl_string","shuffle","generateHeightArray","COLOR","generateColoredArray","animations","swapAnimations","temp_array","slice","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","backgroundColor","temp","movedElement","splice","progress","border","temp_two","_","QUICK_SORT_HOARE","QUICK_SORT_LOMUNTO","MERGE_SORT","SELECTION_SORT","visualizeSwapOnly","barHeightVisualization","colorVisualization","visualizerHeight","Component"],"mappings":"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","sourcesContent":["import './SortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from '../grid_element/GridElement';\n\nimport bubbleSort from '../../sorting_algorithms/bubbleSort';\nimport quickSortHoare from '../../sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from '../../sorting_algorithms/quickSortLomunto';\nimport mergeSort from '../../sorting_algorithms/mergeSort';\nimport selectionSort from '../../sorting_algorithms/selectionSort';\n\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\nimport { visualizationTypes } from '../../enums/visualizationTypes';\nimport { sortingAlgorithms } from '../../enums/sortingAlgorithms';\n\nimport Header from '../header/header'\n\n\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\nconst SORTING_SPEED_IN_MS = 30; // Time between each animations\nconst VISUALIZE_COMPARISONS = true; // Boolean to color the bars being compared / swapped and the pivots\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n            windowHeight: window.innerHeight,\n            loadingBarProgress: 0,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n    \n    componentDidMount() {\n        this.generateNewArray();\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    handleResize(e) {\n        this.setState({windowHeight: window.innerHeight});\n        this.generateNewArray();\n    }\n    \n    /*\n    Method used to update the state based on the sorting algorithm dropdown\n    */\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    /*\n    Method used to update the state based on the visualization type\n    */\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value}, () => {this.generateNewArray();});\n    };\n\n    /*\n    Method to generate a random integer that is used for the heights of the bars\n    */\n    getRandomInt() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        const min = 30;\n        const max = maxBarHeight;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /*\n    Method used to generate an array of elements with random heights\n    */\n    generateHeightArray() {\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={height} element_height={height} color={\"#282c34\"}/>);\n        }\n        this.setState({array: new_array});\n    }\n\n    /*\n    Method used to shuffle the sorted list of colored elements\n    */\n    shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n\n    /*\n    Method to generate an array of colored elements using the HSL color scheme\n    */\n    generateColoredArray() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var value = i * 3;\n            var hsl_string = \"hsl(\"+value+\",60%,70%)\";\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={value} element_height={maxBarHeight} color={hsl_string} />);\n        }\n        new_array = this.shuffle(new_array); \n        this.setState({array: new_array});\n    }\n\n    /*\n    Method to generate a new array based on the visualization type\n    */\n    generateNewArray() {\n        this.setState({loadingBarProgress: 0});\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.generateHeightArray();\n        } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n            this.generateColoredArray();\n        }\n    }\n\n    /*\n    Method to remove all of the non swap visualizations\n    */\n    visualizeSwapOnly(animations) {\n        var swapAnimations = [];\n\n        for (let i = 0; i < animations.length; i++) {\n            if (animations[i][0] === \"swap\") {\n                swapAnimations.push(animations[i]);\n            }\n        }\n        return swapAnimations;\n    }\n\n    /*\n    Method used to visualize sorting algorithm with bar height\n    */\n    barHeightVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n                if (animation_type === \"check\") { \n                    gridElements[barOneIdx].style.backgroundColor = \"cyan\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"pivot-select\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                } else if (animation_type === \"pivot-deselect\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"correct\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i) / animations.length) * 100) + 1;\n                this.setState({loadingBarProgress: progress});\n\n            }, i * 30);\n        }\n    }\n\n    /*\n    Method used to visualize sorting algorithm with color\n    */\n    colorVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.border = \"black 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"white 1px solid\";\n                } else if (animation_type === \"swap\") {\n                    var temp_two = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp_two;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i + 1) / animations.length) * 100);\n                this.setState({loadingBarProgress: progress});\n            }, i * SORTING_SPEED_IN_MS);\n        }\n    }\n\n    /*\n    Method to visualize the sorting process of the selected algorithm using the selected visualization\n    */\n    sortElements() {\n        var animations = [];\n        var _;\n        if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n            animations = bubbleSort(this.state.array.slice());\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n            [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n            [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n            animations = mergeSort(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.SELECTION_SORT) {\n            animations = selectionSort(this.state.array.slice());\n        }\n\n        if (!VISUALIZE_COMPARISONS) {\n            animations = this.visualizeSwapOnly(animations);\n        }\n\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.barHeightVisualization(animations);\n        } else if (this.state.visualizationType === visualizationTypes.COLOR){\n            this.colorVisualization(animations);\n        }\n    }\n\n    render () {\n        const windowHeight = this.state.windowHeight\n        const visualizerHeight = windowHeight - HEADER_DIFFERENCE;\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                />\n                <ProgressBar completed={this.state.loadingBarProgress} borderRadius=\"0px\" customLabel=\" \" height=\"5px\" bgColor=\"red\" baseBgColor=\"white\"/>\n                <div className=\"sorting-grid\" style={{height: visualizerHeight}}>\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}