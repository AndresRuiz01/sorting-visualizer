{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/SortingGrid.js\",\n    _s = $RefreshSig$();\n\nimport './SortingGrid.css';\nimport GridElement from './GridElement';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomInt() {\n  const min = 30;\n  const max = 500;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction SortingGrid({\n  numElements\n}) {\n  _s();\n\n  function bubbleSort(arr) {\n    var i, j;\n    var len = arr.length;\n    var isSwapped = false;\n\n    for (i = 0; i < len; i++) {\n      isSwapped = false;\n\n      for (j = 0; j < len; j++) {\n        if (arr[j + 1] === undefined) {\n          continue;\n        }\n\n        if (arr[j].props.element_height > arr[j + 1].props.element_height) {\n          var temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n          isSwapped = true;\n        }\n      } // IF no two elements were swapped by inner loop, then break \n\n\n      if (!isSwapped) {\n        break;\n      }\n    } // Print the array\n\n\n    return arr;\n  }\n\n  const [elementArray, setElementArray] = useState([]);\n  var array = [];\n\n  for (var i = 0; i < numElements; i++) {\n    var height = getRandomInt();\n    array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n      element_height: height\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this));\n  } // setElementArray(array);\n\n\n  bubbleSort(array); // var sorted_array = array;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sorting-grid\",\n    children: elementArray\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SortingGrid, \"UfUZlK/EPWVlIIHY6M6L0ZOvots=\");\n\n_c = SortingGrid;\nexport default SortingGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingGrid\");","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/SortingGrid.js"],"names":["GridElement","React","useState","getRandomInt","min","max","Math","floor","random","SortingGrid","numElements","bubbleSort","arr","i","j","len","length","isSwapped","undefined","props","element_height","temp","elementArray","setElementArray","array","height","push"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,SAASC,YAAT,GAAwB;AACpB,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH;;AAKD,SAASK,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAoC;AAAA;;AAGlC,WAASC,UAAT,CAAoBC,GAApB,EAAwB;AACtB,QAAIC,CAAJ,EAAOC,CAAP;AACA,QAAIC,GAAG,GAAGH,GAAG,CAACI,MAAd;AAEA,QAAIC,SAAS,GAAG,KAAhB;;AAEA,SAAIJ,CAAC,GAAE,CAAP,EAAUA,CAAC,GAAGE,GAAd,EAAmBF,CAAC,EAApB,EAAuB;AAErBI,MAAAA,SAAS,GAAG,KAAZ;;AAEA,WAAIH,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGC,GAAf,EAAoBD,CAAC,EAArB,EAAwB;AACpB,YAAIF,GAAG,CAACE,CAAC,GAAC,CAAH,CAAH,KAAaI,SAAjB,EAA4B;AACxB;AACH;;AACD,YAAGN,GAAG,CAACE,CAAD,CAAH,CAAOK,KAAP,CAAaC,cAAb,GAA8BR,GAAG,CAACE,CAAC,GAAG,CAAL,CAAH,CAAWK,KAAX,CAAiBC,cAAlD,EAAiE;AAC/D,cAAIC,IAAI,GAAGT,GAAG,CAACE,CAAD,CAAd;AACAF,UAAAA,GAAG,CAACE,CAAD,CAAH,GAASF,GAAG,CAACE,CAAC,GAAC,CAAH,CAAZ;AACAF,UAAAA,GAAG,CAACE,CAAC,GAAC,CAAH,CAAH,GAAWO,IAAX;AACAJ,UAAAA,SAAS,GAAG,IAAZ;AACD;AACJ,OAdoB,CAgBrB;;;AAEA,UAAG,CAACA,SAAJ,EAAc;AACZ;AACD;AACF,KA3BqB,CA6BtB;;;AACA,WAAOL,GAAP;AACH;;AAEC,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,EAAD,CAAhD;AAEA,MAAIsB,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,EAAlC,EAAsC;AACpC,QAAIY,MAAM,GAAGtB,YAAY,EAAzB;AACAqB,IAAAA,KAAK,CAACE,IAAN,eAAW,QAAC,WAAD;AAAqB,MAAA,cAAc,EAAED;AAArC,OAAkBZ,CAAlB;AAAA;AAAA;AAAA;AAAA,YAAX;AACD,GA1CiC,CA2ClC;;;AACAF,EAAAA,UAAU,CAACa,KAAD,CAAV,CA5CkC,CA6ClC;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,cACIF;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD;;GAlDQb,W;;KAAAA,W;AAoDT,eAAeA,WAAf","sourcesContent":["import './SortingGrid.css';\nimport GridElement from './GridElement';\nimport React, {useState} from 'react';\n\nfunction getRandomInt() {\n    const min = 30;\n    const max = 500;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\n    \n\nfunction SortingGrid({numElements}) {\n\n\n  function bubbleSort(arr){\n    var i, j;\n    var len = arr.length;\n      \n    var isSwapped = false;\n      \n    for(i =0; i < len; i++){\n        \n      isSwapped = false;\n        \n      for(j = 0; j < len; j++){ \n          if (arr[j+1] === undefined) {\n              continue;\n          }\n          if(arr[j].props.element_height > arr[j + 1].props.element_height){\n            var temp = arr[j]\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n            isSwapped = true;\n          }\n      }\n        \n      // IF no two elements were swapped by inner loop, then break \n        \n      if(!isSwapped){\n        break;\n      }\n    }\n      \n    // Print the array\n    return(arr);\n}\n\n  const [elementArray, setElementArray] = useState([]);\n\n  var array = [];\n  for (var i = 0; i < numElements; i++) {\n    var height = getRandomInt();\n    array.push(<GridElement key={i} element_height={height}/>)\n  }\n  // setElementArray(array);\n  bubbleSort(array);\n  // var sorted_array = array;\n\n  return <div className=\"sorting-grid\">\n            {elementArray}\n         </div>\n}\n\nexport default SortingGrid;"]},"metadata":{},"sourceType":"module"}