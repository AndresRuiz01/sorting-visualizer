{"ast":null,"code":"function merge(left, right) {\n  let sortedArr = []; // the sorted elements will go here\n\n  while (left.length && right.length) {\n    // insert the smallest element to the sortedArr\n    if (left[0] < right[0]) {\n      sortedArr.push(left.shift());\n    } else {\n      sortedArr.push(right.shift());\n    }\n  } // use spread operator and create a new array, combining the three arrays\n\n\n  return [...sortedArr, ...left, ...right];\n}\n\nfunction mergeSort(arr) {\n  const half = arr.length / 2; // the base case is array length <=1\n\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  const left = arr.splice(0, half); // the first half of the array\n\n  const right = arr;\n  return merge(mergeSort(left), mergeSort(right));\n} // function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n// }\n\n\nexport default mergeSort;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/merge_sort.js"],"names":["merge","left","right","sortedArr","length","push","shift","mergeSort","arr","half","splice"],"mappings":"AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACxB,MAAIC,SAAS,GAAG,EAAhB,CADwB,CACJ;;AAEpB,SAAOF,IAAI,CAACG,MAAL,IAAeF,KAAK,CAACE,MAA5B,EAAoC;AAClC;AACA,QAAIH,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAnB,EAAwB;AACtBC,MAAAA,SAAS,CAACE,IAAV,CAAeJ,IAAI,CAACK,KAAL,EAAf;AACD,KAFD,MAEO;AACLH,MAAAA,SAAS,CAACE,IAAV,CAAeH,KAAK,CAACI,KAAN,EAAf;AACD;AACF,GAVuB,CAYxB;;;AACA,SAAO,CAAC,GAAGH,SAAJ,EAAe,GAAGF,IAAlB,EAAwB,GAAGC,KAA3B,CAAP;AACD;;AAED,SAASK,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,QAAMC,IAAI,GAAGD,GAAG,CAACJ,MAAJ,GAAa,CAA1B,CADsB,CAGtB;;AACA,MAAII,GAAG,CAACJ,MAAJ,IAAc,CAAlB,EAAqB;AACnB,WAAOI,GAAP;AACD;;AAED,QAAMP,IAAI,GAAGO,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcD,IAAd,CAAb,CARsB,CAQY;;AAClC,QAAMP,KAAK,GAAGM,GAAd;AACA,SAAOR,KAAK,CAACO,SAAS,CAACN,IAAD,CAAV,EAAkBM,SAAS,CAACL,KAAD,CAA3B,CAAZ;AACD,C,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;AAEA,eAAeK,SAAf","sourcesContent":["function merge(left, right) {\n    let sortedArr = []; // the sorted elements will go here\n  \n    while (left.length && right.length) {\n      // insert the smallest element to the sortedArr\n      if (left[0] < right[0]) {\n        sortedArr.push(left.shift());\n      } else {\n        sortedArr.push(right.shift());\n      }\n    }\n  \n    // use spread operator and create a new array, combining the three arrays\n    return [...sortedArr, ...left, ...right];\n  }\n\n  function mergeSort(arr) {\n    const half = arr.length / 2;\n  \n    // the base case is array length <=1\n    if (arr.length <= 1) {\n      return arr;\n    }\n  \n    const left = arr.splice(0, half); // the first half of the array\n    const right = arr;\n    return merge(mergeSort(left), mergeSort(right));\n  }\n\n// function merge(array, start, half, end, leftMerge, rightMerge) {\n//     var leftPosition = start;\n//     var rightPosition = start + half + 1;\n//     while (start < end) {\n//         if (array[leftPosition] < array[rightPosition]) {\n//             leftPosition++;\n//         } else {\n//             leftPosition++;\n//             rightPosition++;\n//         }\n//     }\n// }\n\n// function mergeSort(array, startIndex, endIndex) {\n//     const half = (endIndex - startIndex) / 2;\n\n//     if ((endIndex - startIndex) < 2) {\n//         return array;\n//     }\n\n//     merge(array, startIndex, half, endIndex, mergeSort(array, startIndex, startIndex + half), mergeSort(array, startIndex + half + 1, endIndex))\n\n// }\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}