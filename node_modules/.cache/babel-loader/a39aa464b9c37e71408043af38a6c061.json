{"ast":null,"code":"function quickSortRecursive(arr, start, end) {\n  // Base case or terminating case\n  var quicksortAnimations = [];\n\n  if (start >= end) {\n    return quicksortAnimations;\n  } // Returns pivotIndex\n\n\n  var [index, partitionAnimations] = partition(arr, start, end); // Recursively apply the same logic to the left and right subarrays\n\n  var quickSortAnimationsOne = quickSortRecursive(arr, start, index - 1);\n  var quickSortAnimationsTwo = quickSortRecursive(arr, index + 1, end);\n  quicksortAnimations = [...partitionAnimations, ...quickSortAnimationsOne, ...quickSortAnimationsTwo];\n  return quicksortAnimations;\n}\n\nfunction partition(arr, start, end) {\n  // Taking the last element as the pivot\n  var animations = [];\n  const pivotValue = arr[end];\n  let pivotIndex = start;\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] < pivotValue) {\n      // Swapping elements\n      animations.push([\"swap\", pivotIndex, i]);\n      [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]]; // Moving to next element\n\n      pivotIndex++;\n    }\n  } // Putting the pivot value in the middle\n\n\n  animations.push([\"swap\", end, pivotIndex]);\n  [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]];\n  return [pivotIndex, animations];\n}\n\n;\nexport default quickSortRecursive;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sorting_algorithms/quick_sort.js"],"names":["quickSortRecursive","arr","start","end","quicksortAnimations","index","partitionAnimations","partition","quickSortAnimationsOne","quickSortAnimationsTwo","animations","pivotValue","pivotIndex","i","push"],"mappings":"AAAA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6C;AACzC;AACA,MAAIC,mBAAmB,GAAG,EAA1B;;AACA,MAAIF,KAAK,IAAIC,GAAb,EAAkB;AACd,WAAOC,mBAAP;AACH,GALwC,CAOzC;;;AACA,MAAI,CAACC,KAAD,EAAQC,mBAAR,IAA+BC,SAAS,CAACN,GAAD,EAAMC,KAAN,EAAaC,GAAb,CAA5C,CARyC,CAUzC;;AACA,MAAIK,sBAAsB,GAAGR,kBAAkB,CAACC,GAAD,EAAMC,KAAN,EAAaG,KAAK,GAAG,CAArB,CAA/C;AACA,MAAII,sBAAsB,GAAGT,kBAAkB,CAACC,GAAD,EAAMI,KAAK,GAAG,CAAd,EAAiBF,GAAjB,CAA/C;AAEAC,EAAAA,mBAAmB,GAAG,CAAC,GAAGE,mBAAJ,EAAyB,GAAGE,sBAA5B,EAAoD,GAAGC,sBAAvD,CAAtB;AAEA,SAAOL,mBAAP;AACH;;AAED,SAASG,SAAT,CAAmBN,GAAnB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAmC;AAC/B;AACA,MAAIO,UAAU,GAAG,EAAjB;AACA,QAAMC,UAAU,GAAGV,GAAG,CAACE,GAAD,CAAtB;AACA,MAAIS,UAAU,GAAGV,KAAjB;;AACA,OAAK,IAAIW,CAAC,GAAGX,KAAb,EAAoBW,CAAC,GAAGV,GAAxB,EAA6BU,CAAC,EAA9B,EAAkC;AAC9B,QAAIZ,GAAG,CAACY,CAAD,CAAH,GAASF,UAAb,EAAyB;AACzB;AACAD,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,MAAD,EAASF,UAAT,EAAqBC,CAArB,CAAhB;AACA,OAACZ,GAAG,CAACY,CAAD,CAAJ,EAASZ,GAAG,CAACW,UAAD,CAAZ,IAA4B,CAACX,GAAG,CAACW,UAAD,CAAJ,EAAkBX,GAAG,CAACY,CAAD,CAArB,CAA5B,CAHyB,CAIzB;;AACAD,MAAAA,UAAU;AACT;AACJ,GAb8B,CAe/B;;;AACAF,EAAAA,UAAU,CAACI,IAAX,CAAgB,CAAC,MAAD,EAASX,GAAT,EAAcS,UAAd,CAAhB;AACA,GAACX,GAAG,CAACW,UAAD,CAAJ,EAAkBX,GAAG,CAACE,GAAD,CAArB,IAA8B,CAACF,GAAG,CAACE,GAAD,CAAJ,EAAWF,GAAG,CAACW,UAAD,CAAd,CAA9B;AACA,SAAO,CAACA,UAAD,EAAaF,UAAb,CAAP;AACH;;AAAA;AAED,eAAeV,kBAAf","sourcesContent":["function quickSortRecursive(arr, start, end) {\n    // Base case or terminating case\n    var quicksortAnimations = []\n    if (start >= end) {\n        return quicksortAnimations;\n    }\n    \n    // Returns pivotIndex\n    var [index, partitionAnimations] = partition(arr, start, end);\n    \n    // Recursively apply the same logic to the left and right subarrays\n    var quickSortAnimationsOne = quickSortRecursive(arr, start, index - 1);\n    var quickSortAnimationsTwo = quickSortRecursive(arr, index + 1, end);\n\n    quicksortAnimations = [...partitionAnimations, ...quickSortAnimationsOne, ...quickSortAnimationsTwo]\n\n    return quicksortAnimations;\n}\n\nfunction partition(arr, start, end){\n    // Taking the last element as the pivot\n    var animations = [];\n    const pivotValue = arr[end];\n    let pivotIndex = start; \n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n        // Swapping elements\n        animations.push([\"swap\", pivotIndex, i]);\n        [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\n        // Moving to next element\n        pivotIndex++;\n        }\n    }\n    \n    // Putting the pivot value in the middle\n    animations.push([\"swap\", end, pivotIndex]);\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \n    return [pivotIndex, animations];\n};\n\nexport default quickSortRecursive;"]},"metadata":{},"sourceType":"module"}