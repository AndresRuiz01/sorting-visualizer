{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js\";\nimport './sortingVisualizer.css';\nimport React from 'react';\nimport GridElement from './GridElement';\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport quickSortHoare from './sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from './sorting_algorithms/quickSortLomunto'; // import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\nimport Header from './header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithm: sortingAlgorithms.BUBBLE_SORT,\n      visualizationType: visualizationTypes.BAR_HEIGHT\n    };\n    this.generateNewArray = this.generateNewArray.bind(this);\n    this.generateColoredArray = this.generateColoredArray.bind(this);\n    this.sortElements = this.sortElements.bind(this);\n    this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n    this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n  } // Generate array when website loads\n\n\n  componentDidMount() {\n    this.generateNewArray();\n  } // Get a random int\n  // TODO: Get height of screen to determine max height of bars\n\n\n  getRandomInt() {\n    const min = 30;\n    const max = 700;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Generate new array to sort\n\n\n  generateNewArray() {\n    if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n      this.generateHeightArray();\n    } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n      this.generateColoredArray();\n    }\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  generateHeightArray() {\n    var new_array = [];\n\n    for (var i = 0; i < 90; i++) {\n      var height = this.getRandomInt();\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: height,\n        element_height: height,\n        color: \"#282c34\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 28\n      }, this));\n    }\n\n    this.setState({\n      array: new_array\n    });\n  } // hsl(120,60%,70%)\n\n\n  generateColoredArray() {\n    var new_array = [];\n\n    for (var i = 0; i < 270; i++) {\n      var value = i;\n      var hsl_string = \"hsl(\" + value + \",60%,70%)\"; // console.log(hsl_string);\n\n      new_array.push( /*#__PURE__*/_jsxDEV(GridElement, {\n        className: \"grid-element\",\n        value: value,\n        element_height: 700,\n        color: hsl_string\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 28\n      }, this));\n    }\n\n    new_array = this.shuffle(new_array);\n    this.setState({\n      array: new_array\n    });\n  }\n\n  updateSelectedAlgorithm(e) {\n    this.setState({\n      algorithm: e.target.value\n    });\n  }\n\n  updateSelectedVisualizationType(e) {\n    this.setState({\n      visualizationType: e.target.value\n    }, () => {\n      this.generateNewArray();\n    });\n  }\n\n  printArray(array) {\n    for (let i = 0; i < array.length; i++) {\n      console.log(array[i].props.value);\n    }\n  }\n\n  sortElements() {\n    var animations = [];\n    var array;\n\n    if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n      animations = getBubbleSortAnimations(this.state.array.slice());\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n      [array, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length - 1);\n    } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n      [array, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length - 1); // this.printArray(array);\n      // console.log(animations);\n    }\n\n    var temp_array = this.state.array.slice();\n\n    for (let i = 0; i < animations.length; i++) {\n      const gridElements = document.getElementsByClassName('grid-element');\n      setTimeout(() => {\n        const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n          if (animation_type === \"check\") {\n            gridElements[barOneIdx].style.backgroundColor = \"green\";\n            gridElements[barTwoIdx].style.backgroundColor = \"green\"; // barOne.props.style.backgroundColor = \"#ffffff\";\n            // barTwo.props.style.backgroundColor = \"#ffffff\";\n            // console.log(barOne);\n          }\n\n          if (animation_type === \"uncheck\") {\n            gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n            gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n          }\n\n          if (animation_type === \"swap-wrong\") {\n            gridElements[barOneIdx].style.backgroundColor = \"red\";\n            gridElements[barTwoIdx].style.backgroundColor = \"red\";\n          }\n\n          if (animation_type === \"swap\") {\n            var temp = temp_array[barOneIdx];\n            temp_array[barOneIdx] = temp_array[barTwoIdx];\n            temp_array[barTwoIdx] = temp;\n          }\n        } else {\n          if (animation_type === \"check\") {\n            gridElements[barOneIdx].style.border = \"black 1px solid\";\n            gridElements[barTwoIdx].style.border = \"black 1px solid\";\n          }\n\n          if (animation_type === \"uncheck\") {\n            gridElements[barOneIdx].style.border = \"white 1px solid\";\n            gridElements[barTwoIdx].style.border = \"white 1px solid\";\n          }\n\n          if (animation_type === \"swap\") {\n            var temp_two = temp_array[barOneIdx];\n            temp_array[barOneIdx] = temp_array[barTwoIdx];\n            temp_array[barTwoIdx] = temp_two;\n          }\n        }\n\n        this.setState({\n          array: temp_array\n        });\n      }, i * 20);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-visualizer\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        algorithm: this.state.algorithm,\n        visualizationType: this.state.visualizationType,\n        generateNewArray: this.generateNewArray,\n        sortElements: this.sortElements,\n        updateSelectedAlgorithm: this.updateSelectedAlgorithm,\n        updateSelectedVisualizationType: this.updateSelectedVisualizationType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"below-header-space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-grid\",\n        children: this.state.array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/andres/Desktop/personal_projects/learning-react/sorting-visualizer/src/sortingVisualizer.js"],"names":["React","GridElement","getBubbleSortAnimations","quickSortHoare","quickSortLomunto","visualizationTypes","sortingAlgorithms","Header","SortingVisualizer","Component","constructor","props","state","array","algorithm","BUBBLE_SORT","visualizationType","BAR_HEIGHT","generateNewArray","bind","generateColoredArray","sortElements","updateSelectedAlgorithm","updateSelectedVisualizationType","componentDidMount","getRandomInt","min","max","Math","floor","random","generateHeightArray","COLOR","shuffle","currentIndex","length","randomIndex","new_array","i","height","push","setState","value","hsl_string","e","target","printArray","console","log","animations","slice","QUICK_SORT_HOARE","QUICK_SORT_LOMUNTO","temp_array","gridElements","document","getElementsByClassName","setTimeout","animation_type","barOneIdx","barTwoIdx","style","backgroundColor","temp","border","temp_two","render"],"mappings":";AAAA,OAAO,yBAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,uBAAP,MAAoC,kCAApC;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,gBAAP,MAA6B,uCAA7B,C,CACA;;AAEA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,WAAP;;;AAEA,MAAMC,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAAgD;AAE5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,SAAS,EAAER,iBAAiB,CAACS,WAFpB;AAGTC,MAAAA,iBAAiB,EAAEX,kBAAkB,CAACY;AAH7B,KAAb;AAMA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AAEA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AAEA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BH,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKI,+BAAL,GAAuC,KAAKA,+BAAL,CAAqCJ,IAArC,CAA0C,IAA1C,CAAvC;AACH,GAjB2C,CAmB5C;;;AACAK,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,gBAAL;AACH,GAtB2C,CAwB5C;AACA;;;AACAO,EAAAA,YAAY,GAAG;AACX,UAAMC,GAAG,GAAG,EAAZ;AACA,UAAMC,GAAG,GAAG,GAAZ;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH,GA9B2C,CAgC5C;;;AACAR,EAAAA,gBAAgB,GAAG;AACf,QAAI,KAAKN,KAAL,CAAWI,iBAAX,KAAiCX,kBAAkB,CAACY,UAAxD,EAAoE;AAChE,WAAKc,mBAAL;AACH,KAFD,MAEO,IAAI,KAAKnB,KAAL,CAAWI,iBAAX,KAAiCX,kBAAkB,CAAC2B,KAAxD,EAA+D;AAClE,WAAKZ,oBAAL;AACH;AACJ;;AAEDa,EAAAA,OAAO,CAACpB,KAAD,EAAQ;AACX,QAAIqB,YAAY,GAAGrB,KAAK,CAACsB,MAAzB;AAAA,QAAkCC,WAAlC,CADW,CAGX;;AACA,WAAOF,YAAY,KAAK,CAAxB,EAA2B;AAEzB;AACAE,MAAAA,WAAW,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBI,YAA3B,CAAd;AACAA,MAAAA,YAAY,GAJa,CAMzB;;AACA,OAACrB,KAAK,CAACqB,YAAD,CAAN,EAAsBrB,KAAK,CAACuB,WAAD,CAA3B,IAA4C,CAC1CvB,KAAK,CAACuB,WAAD,CADqC,EACtBvB,KAAK,CAACqB,YAAD,CADiB,CAA5C;AAED;;AAED,WAAOrB,KAAP;AACH;;AAEDkB,EAAAA,mBAAmB,GAAG;AAClB,QAAIM,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIC,MAAM,GAAG,KAAKd,YAAL,EAAb;AACAY,MAAAA,SAAS,CAACG,IAAV,eAAe,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,cAAvB;AAA8C,QAAA,KAAK,EAAED,MAArD;AAA6D,QAAA,cAAc,EAAEA,MAA7E;AAAqF,QAAA,KAAK,EAAE;AAA5F,SAA2CD,CAA3C;AAAA;AAAA;AAAA;AAAA,cAAf;AACH;;AACD,SAAKG,QAAL,CAAc;AAAC5B,MAAAA,KAAK,EAAEwB;AAAR,KAAd;AACH,GAlE2C,CAoE5C;;;AACAjB,EAAAA,oBAAoB,GAAG;AACnB,QAAIiB,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,UAAII,KAAK,GAAGJ,CAAZ;AACA,UAAIK,UAAU,GAAG,SAAOD,KAAP,GAAa,WAA9B,CAF0B,CAG1B;;AACAL,MAAAA,SAAS,CAACG,IAAV,eAAe,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,cAAvB;AAA8C,QAAA,KAAK,EAAEE,KAArD;AAA4D,QAAA,cAAc,EAAE,GAA5E;AAAiF,QAAA,KAAK,EAAEC;AAAxF,SAA2CL,CAA3C;AAAA;AAAA;AAAA;AAAA,cAAf;AACH;;AACDD,IAAAA,SAAS,GAAG,KAAKJ,OAAL,CAAaI,SAAb,CAAZ;AACA,SAAKI,QAAL,CAAc;AAAC5B,MAAAA,KAAK,EAAEwB;AAAR,KAAd;AACH;;AAEDf,EAAAA,uBAAuB,CAACsB,CAAD,EAAI;AACvB,SAAKH,QAAL,CAAc;AAAC3B,MAAAA,SAAS,EAAE8B,CAAC,CAACC,MAAF,CAASH;AAArB,KAAd;AACH;;AAEDnB,EAAAA,+BAA+B,CAACqB,CAAD,EAAI;AAC/B,SAAKH,QAAL,CAAc;AAACzB,MAAAA,iBAAiB,EAAE4B,CAAC,CAACC,MAAF,CAASH;AAA7B,KAAd,EAAmD,MAAM;AAAC,WAAKxB,gBAAL;AAAyB,KAAnF;AACH;;AAED4B,EAAAA,UAAU,CAACjC,KAAD,EAAQ;AACd,SAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,KAAK,CAACsB,MAA1B,EAAkCG,CAAC,EAAnC,EAAuC;AACnCS,MAAAA,OAAO,CAACC,GAAR,CAAYnC,KAAK,CAACyB,CAAD,CAAL,CAAS3B,KAAT,CAAe+B,KAA3B;AACH;AACJ;;AAEDrB,EAAAA,YAAY,GAAG;AACX,QAAI4B,UAAU,GAAG,EAAjB;AACA,QAAIpC,KAAJ;;AACA,QAAI,KAAKD,KAAL,CAAWE,SAAX,KAAyBR,iBAAiB,CAACS,WAA/C,EAA4D;AACxDkC,MAAAA,UAAU,GAAG/C,uBAAuB,CAAC,KAAKU,KAAL,CAAWC,KAAX,CAAiBqC,KAAjB,EAAD,CAApC;AACH,KAFD,MAEO,IAAI,KAAKtC,KAAL,CAAWE,SAAX,KAAyBR,iBAAiB,CAAC6C,gBAA/C,EAAiE;AACpE,OAACtC,KAAD,EAAQoC,UAAR,IAAsB9C,cAAc,CAAC,KAAKS,KAAL,CAAWC,KAAX,CAAiBqC,KAAjB,EAAD,EAA2B,CAA3B,EAA8B,KAAKtC,KAAL,CAAWC,KAAX,CAAiBsB,MAAjB,GAAwB,CAAtD,CAApC;AACH,KAFM,MAEA,IAAI,KAAKvB,KAAL,CAAWE,SAAX,KAAyBR,iBAAiB,CAAC8C,kBAA/C,EAAmE;AACtE,OAACvC,KAAD,EAAQoC,UAAR,IAAsB7C,gBAAgB,CAAC,KAAKQ,KAAL,CAAWC,KAAX,CAAiBqC,KAAjB,EAAD,EAA2B,CAA3B,EAA8B,KAAKtC,KAAL,CAAWC,KAAX,CAAiBsB,MAAjB,GAAwB,CAAtD,CAAtC,CADsE,CAEtE;AACA;AACH;;AAED,QAAIkB,UAAU,GAAG,KAAKzC,KAAL,CAAWC,KAAX,CAAiBqC,KAAjB,EAAjB;;AACA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,UAAU,CAACd,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AACxC,YAAMgB,YAAY,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAArB;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,cAAM,CAACC,cAAD,EAAiBC,SAAjB,EAA4BC,SAA5B,IAAyCX,UAAU,CAACX,CAAD,CAAzD;;AAEA,YAAI,KAAK1B,KAAL,CAAWI,iBAAX,KAAiCX,kBAAkB,CAACY,UAAxD,EAAoE;AAEhE,cAAIyC,cAAc,KAAK,OAAvB,EAAgC;AAC5BJ,YAAAA,YAAY,CAACK,SAAD,CAAZ,CAAwBE,KAAxB,CAA8BC,eAA9B,GAAgD,OAAhD;AACAR,YAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBC,KAAxB,CAA8BC,eAA9B,GAAgD,OAAhD,CAF4B,CAG5B;AACA;AACA;AACH;;AAED,cAAIJ,cAAc,KAAK,SAAvB,EAAkC;AAC9BJ,YAAAA,YAAY,CAACK,SAAD,CAAZ,CAAwBE,KAAxB,CAA8BC,eAA9B,GAAgD,SAAhD;AACAR,YAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBC,KAAxB,CAA8BC,eAA9B,GAAgD,SAAhD;AACH;;AAED,cAAIJ,cAAc,KAAK,YAAvB,EAAqC;AACjCJ,YAAAA,YAAY,CAACK,SAAD,CAAZ,CAAwBE,KAAxB,CAA8BC,eAA9B,GAAgD,KAAhD;AACAR,YAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBC,KAAxB,CAA8BC,eAA9B,GAAgD,KAAhD;AACH;;AAED,cAAIJ,cAAc,KAAK,MAAvB,EAA+B;AAC3B,gBAAIK,IAAI,GAAGV,UAAU,CAACM,SAAD,CAArB;AACAN,YAAAA,UAAU,CAACM,SAAD,CAAV,GAAwBN,UAAU,CAACO,SAAD,CAAlC;AACAP,YAAAA,UAAU,CAACO,SAAD,CAAV,GAAwBG,IAAxB;AACH;AACJ,SAzBD,MAyBO;AACH,cAAIL,cAAc,KAAK,OAAvB,EAAgC;AAC5BJ,YAAAA,YAAY,CAACK,SAAD,CAAZ,CAAwBE,KAAxB,CAA8BG,MAA9B,GAAuC,iBAAvC;AACAV,YAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBC,KAAxB,CAA8BG,MAA9B,GAAuC,iBAAvC;AACH;;AAED,cAAIN,cAAc,KAAK,SAAvB,EAAkC;AAC9BJ,YAAAA,YAAY,CAACK,SAAD,CAAZ,CAAwBE,KAAxB,CAA8BG,MAA9B,GAAuC,iBAAvC;AACAV,YAAAA,YAAY,CAACM,SAAD,CAAZ,CAAwBC,KAAxB,CAA8BG,MAA9B,GAAuC,iBAAvC;AACH;;AAED,cAAIN,cAAc,KAAK,MAAvB,EAA+B;AAC3B,gBAAIO,QAAQ,GAAGZ,UAAU,CAACM,SAAD,CAAzB;AACAN,YAAAA,UAAU,CAACM,SAAD,CAAV,GAAwBN,UAAU,CAACO,SAAD,CAAlC;AACAP,YAAAA,UAAU,CAACO,SAAD,CAAV,GAAwBK,QAAxB;AACH;AACJ;;AAED,aAAKxB,QAAL,CAAc;AAAC5B,UAAAA,KAAK,EAAEwC;AAAR,SAAd;AAEH,OAhDS,EAgDPf,CAAC,GAAG,EAhDG,CAAV;AAiDH;AACJ;;AAED4B,EAAAA,MAAM,GAAI;AACN,wBACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,SAAS,EAAE,KAAKtD,KAAL,CAAWE,SAD1B;AAEI,QAAA,iBAAiB,EAAE,KAAKF,KAAL,CAAWI,iBAFlC;AAGI,QAAA,gBAAgB,EAAE,KAAKE,gBAH3B;AAII,QAAA,YAAY,EAAE,KAAKG,YAJvB;AAKI,QAAA,uBAAuB,EAAE,KAAKC,uBALlC;AAMI,QAAA,+BAA+B,EAAE,KAAKC;AAN1C;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACK,KAAKX,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AArL2C;;AAwLhD,eAAeL,iBAAf","sourcesContent":["import './sortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from './GridElement';\n\nimport getBubbleSortAnimations from './sorting_algorithms/bubble_sort';\nimport quickSortHoare from './sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from './sorting_algorithms/quickSortLomunto';\n// import getBogoSortAnimations from './sorting_algorithms/bogo_sort';\n\nimport { visualizationTypes } from './enums/visualizationTypes';\nimport { sortingAlgorithms } from './enums/sortingAlgorithms';\n\nimport Header from './header'\nimport './App.css';\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n\n        this.generateColoredArray = this.generateColoredArray.bind(this);\n\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n    }\n    \n    // Generate array when website loads\n    componentDidMount() {\n        this.generateNewArray();\n    }\n\n    // Get a random int\n    // TODO: Get height of screen to determine max height of bars\n    getRandomInt() {\n        const min = 30;\n        const max = 700;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Generate new array to sort\n    generateNewArray() {\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.generateHeightArray();\n        } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n            this.generateColoredArray();\n        }\n    }\n\n    shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n      \n    generateHeightArray() {\n        var new_array = [];\n        for (var i = 0; i < 90; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={height} element_height={height} color={\"#282c34\"}/>);\n        }\n        this.setState({array: new_array});\n    }\n\n    // hsl(120,60%,70%)\n    generateColoredArray() {\n        var new_array = [];\n        for (var i = 0; i < 270; i++) {\n            var value = i;\n            var hsl_string = \"hsl(\"+value+\",60%,70%)\";\n            // console.log(hsl_string);\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={value} element_height={700} color={hsl_string} />);\n        }\n        new_array = this.shuffle(new_array); \n        this.setState({array: new_array});\n    }\n\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value}, () => {this.generateNewArray();});\n    };\n\n    printArray(array) {\n        for (let i = 0; i < array.length; i++) {\n            console.log(array[i].props.value);\n        }\n    }\n\n    sortElements() {\n        var animations = [];\n        var array;\n        if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n            animations = getBubbleSortAnimations(this.state.array.slice());\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n            [array, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n            [array, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length-1);\n            // this.printArray(array);\n            // console.log(animations);\n        }\n\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n                if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n\n                    if (animation_type === \"check\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"green\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"green\";\n                        // barOne.props.style.backgroundColor = \"#ffffff\";\n                        // barTwo.props.style.backgroundColor = \"#ffffff\";\n                        // console.log(barOne);\n                    }\n\n                    if (animation_type === \"uncheck\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                    }\n\n                    if (animation_type === \"swap-wrong\") {\n                        gridElements[barOneIdx].style.backgroundColor = \"red\";\n                        gridElements[barTwoIdx].style.backgroundColor = \"red\";\n                    }\n\n                    if (animation_type === \"swap\") {\n                        var temp = temp_array[barOneIdx]\n                        temp_array[barOneIdx] = temp_array[barTwoIdx];\n                        temp_array[barTwoIdx] = temp;\n                    }\n                } else {\n                    if (animation_type === \"check\") {\n                        gridElements[barOneIdx].style.border = \"black 1px solid\";\n                        gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                    }\n\n                    if (animation_type === \"uncheck\") {\n                        gridElements[barOneIdx].style.border = \"white 1px solid\";\n                        gridElements[barTwoIdx].style.border = \"white 1px solid\";\n                    }\n\n                    if (animation_type === \"swap\") {\n                        var temp_two = temp_array[barOneIdx]\n                        temp_array[barOneIdx] = temp_array[barTwoIdx];\n                        temp_array[barTwoIdx] = temp_two;\n                    }\n                }\n\n                this.setState({array: temp_array});\n\n            }, i * 20);\n        }\n    }\n\n    render () {\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                    />\n                <div className=\"below-header-space\"></div>\n                <div className=\"sorting-grid\">\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}