{"version":3,"sources":["components/grid_element/GridElement.js","sorting_algorithms/bubbleSort.js","sorting_algorithms/quickSortHoare.js","sorting_algorithms/quickSortLomunto.js","sorting_algorithms/mergeSort.js","sorting_algorithms/selectionSort.js","enums/visualizationTypes.js","enums/sortingAlgorithms.js","components/header/header.js","components/sorting_visualizer/SortingVisualizer.js","components/app/App.js","components/app/reportWebVitals.js","index.js"],"names":["GridElement","element_height","color","className","style","height","backgroundColor","swap","array","indexOne","indexTwo","temp","bubbleSort","animations","i","length","swapped","push","j","props","value","quickSortHoare","left","right","index","animationsLeft","animationsRight","animationsPartition","pivot_index","Math","floor","pivot","partitionHoare","_","quicksortLomuto","partitionLomuto","mergeSort","startIndex","endIndex","half","leftAnimations","rightAnimations","mergeAnimations","start","end","leftPosition","rightPosition","movedElement","splice","merge","selectionSort","min_idx","visualizationTypes","sortingAlgorithms","styles","makeStyles","root","width","borderColor","icon","Header","classes","TextField","visualizationType","onChange","updateSelectedVisualizationType","label","variant","select","SelectProps","MenuItem","algorithm","updateSelectedAlgorithm","onClick","sortElements","generateNewArray","SortingVisualizer","state","windowHeight","window","innerHeight","loadingBarProgress","isSorting","bind","handleResize","this","addEventListener","e","setState","ms","setTimeout","target","max","random","new_array","getRandomInt","randomIndex","currentIndex","maxBarHeight","hsl_string","shuffle","generateHeightArray","generateColoredArray","swapAnimations","temp_array","slice","gridElements","document","getElementsByClassName","animation_type","barOneIdx","barTwoIdx","progress","border","temp_two","quickSortLomunto","barHeightVisualization","colorVisualization","updateStateAfterSorting","visualizerHeight","completed","borderRadius","customLabel","bgColor","baseBgColor","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e07a6639.chunk.js","sourcesContent":["import './GridElement.css';\nimport React from 'react';\n\nfunction GridElement({element_height, color}) {\n\n    return <div className=\"grid-element\" style={{height: element_height, backgroundColor: color}}>\n           </div>\n}\n\nexport default GridElement; ","function swap(array, indexOne, indexTwo){\n    var temp = array[indexOne];\n    array[indexOne] = array[indexTwo];\n    array[indexTwo] = temp;\n}\n\nfunction bubbleSort(array) {\n    var animations = [];\n\n    for (let i = 0; i < array.length; i++) {\n        var swapped = false;\n        animations.push([\"check\", 0, 1]);\n        for (let j = 0; j < array.length - i - 1; j++) {\n            var heightOne = array[j].props.value;\n            var heightTwo = array[j+1].props.value;\n            if ( heightOne > heightTwo ) {\n                swap(array, j, j+1);\n                swapped = true;\n                animations.push([\"swap\", j, j+1]);\n            }\n            if (j+2 <= array.length - i - 1) {\n                animations.push([\"uncheck-check\", j, j+2]);\n            } else {\n                animations.push([\"uncheck\", j, j+1]);\n            }\n        }\n\n        if (!swapped) {\n            break;\n        }\n\n    }\n    return animations;\n}\n\nexport default bubbleSort;\n","function swap(array, indexOne, indexTwo){\n    var temp = array[indexOne];\n    array[indexOne] = array[indexTwo];\n    array[indexTwo] = temp;\n}\n\nfunction partitionHoare(array, left, right) {\n    var animations = [];\n    var pivot_index = Math.floor((right + left) / 2);\n    var pivot = array[Math.floor((right + left) / 2)].props.value; //middle element\n    var i = left; //left pointer\n    var j = right; //right pointer\n    animations.push([\"pivot-select\", pivot_index, pivot_index]);\n    while (i <= j) {\n        if (i === pivot_index) {\n            animations.push([\"check\", j, j]);\n        } else if (j === pivot_index) {\n            animations.push([\"check\", i, i]);\n        } else {\n            animations.push([\"check\", i, j]);\n        }\n\n        while (array[i].props.value < pivot) {\n            if (i === pivot_index) {\n                animations.push([\"check\", i+1, i+1]);\n            } else if ((i + 1) === pivot_index) {\n                animations.push([\"uncheck\", i, i]);\n            } else {\n                animations.push([\"uncheck-check\", i, i+1]);\n            }\n            // animations.push([\"uncheck-check\", i, i+1]);\n            i++;\n        }\n        while (array[j].props.value > pivot) {\n\n            if (j === pivot_index) {\n                animations.push([\"check\", j-1, j-1]);\n            } else if ((j - 1) === pivot_index) {\n                animations.push([\"uncheck\", j, j]);\n            } else {\n                animations.push([\"uncheck-check\", j, j-1]);\n            }\n\n            // animations.push([\"uncheck-check\", j, j-1]);\n            j--;\n        }\n\n\n        // animations.push([\"check\", i, j]);\n        if (i <= j) {\n            if (i === pivot_index) {\n                animations.push([\"swap\", i, j]);\n                animations.push([\"uncheck\", i, i]);\n                pivot_index = j\n            } else if (j === pivot_index) {\n                animations.push([\"swap\", i, j]);\n                animations.push([\"uncheck\", j, j]);\n                pivot_index = i;\n            } else {\n                animations.push([\"swap\", i, j]);\n                animations.push([\"uncheck\", i, j]);           \n            }\n            // animations.push([\"swap-wrong\", i, j]);\n            swap(array, i, j); //sawpping two elements\n            i++;\n            j--;\n        } else{\n            animations.push([\"uncheck\", i, j]);\n        }\n    }\n    animations.push([\"pivot-deselect\", pivot_index, pivot_index]);\n    return [i, animations];\n}\n\nfunction quickSortHoare(array, left, right) {\n    var index;\n    var animationsQuickSort = []\n    var animationsLeft = [];\n    var animationsRight = [];\n    var animationsPartition = [];\n    if (array.length > 1) {\n        [index, animationsPartition] = partitionHoare(array, left, right); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            // eslint-disable-next-line\n            [_, animationsLeft] = quickSortHoare(array, left, index - 1);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            // eslint-disable-next-line\n            [_, animationsRight] = quickSortHoare(array, index, right);\n        }\n    }\n    animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n\n    return [array, animationsQuickSort];\n}\n\nexport default quickSortHoare;","function swap(array, indexOne, indexTwo){\n    var temp = array[indexOne];\n    array[indexOne] = array[indexTwo];\n    array[indexTwo] = temp;\n}\n\nfunction quicksortLomuto(array, left, right) {\n    var animationsQuickSort = []\n    var animationsLeft = [];\n    var animationsRight = [];\n    var animationsPartition = [];\n    var pivot;\n\n\n    if (left < right) {\n        [pivot, animationsPartition]  = partitionLomuto(array, left, right);\n        // eslint-disable-next-line\n        [_, animationsLeft] = quicksortLomuto(array, left, pivot - 1);\n        // eslint-disable-next-line\n        [_, animationsRight] = quicksortLomuto(array, pivot + 1, right);\n    }\n\n    animationsQuickSort = [...animationsPartition, ...animationsRight, ...animationsLeft];\n\n    return [array, animationsQuickSort];\n}\n\nfunction partitionLomuto(array, left, right) {\n    var animations = [];\n    var pivot = right;\n    animations.push([\"pivot-select\", pivot, pivot]);\n    var i = left;\n    animations.push([\"check\", i, i+1]);\n    for (var j = left; j < right; j++) {\n        if (array[j].props.value < array[pivot].props.value) {\n            animations.push([\"swap\", i, j]);\n            if (i === j) {\n                animations.push([\"uncheck-check\", i, i+1]);\n            } else if ((i + 1) === j) {\n                animations.push([\"uncheck-check\", i, j+1]);\n            } else {\n                animations.push([\"uncheck-check\", i, i+1]);\n            }\n            swap(array, i, j);\n            i++;\n        }\n        if ((j+1) < right) {\n            animations.push([\"uncheck-check\", j, j+1]);\n        }\n    }\n    // animations.push([\"uncheck\", i, right-1]);\n    animations.push([\"uncheck\", left, right-1]);\n    // animations.push([\"uncheck\", left, i]);\n    animations.push([\"swap\", i, pivot]);\n    swap(array, i, j);\n    animations.push([\"pivot-deselect\", i, i])\n    return [i, animations];\n}\n\nexport default quicksortLomuto;","function merge(array, start, half, end) {\n    var animations = []\n    var leftPosition = start;\n    var rightPosition = start + half + 1;\n    animations.push([\"check\", leftPosition, rightPosition]);\n    while (rightPosition <= end && leftPosition < rightPosition) {\n        if (array[leftPosition].props.value <= array[rightPosition].props.value) {\n            animations.push([\"uncheck-check\", leftPosition, leftPosition+1]);\n            leftPosition++;\n        } else {\n            // Shift right and insert element\n            // Grab element\n            const movedElement = array.splice(rightPosition, 1)\n            // Place in new position\n            array.splice(leftPosition, 0, movedElement[0]);\n            // animations.push([\"swap-wrong\", leftPosition, leftPosition]);\n            animations.push(['shift', leftPosition, rightPosition]);\n            if (rightPosition+1 > end) {\n                animations.push([\"uncheck-check\", leftPosition, rightPosition]);\n            } else {\n                animations.push([\"uncheck-check\", leftPosition, rightPosition+1]);\n            }\n            leftPosition++;\n            rightPosition++;\n        }\n    }\n    animations.push([\"uncheck\", leftPosition, rightPosition-1]);\n    return animations;\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n    const half = Math.floor((endIndex - startIndex) / 2);\n\n    if ((endIndex - startIndex) < 1) {\n        return [];\n    }\n    const leftAnimations = mergeSort(array, startIndex, startIndex + half);\n    const rightAnimations = mergeSort(array, startIndex + half + 1, endIndex);\n    const mergeAnimations = merge(array, startIndex, half, endIndex);\n    return [...leftAnimations, ...rightAnimations, ...mergeAnimations];\n\n}\n\nexport default mergeSort;","function swap(array, indexOne, indexTwo){\n    var temp = array[indexOne];\n    array[indexOne] = array[indexTwo];\n    array[indexTwo] = temp;\n}\n \nfunction selectionSort(array) {\n    var i, j, min_idx;\n    var animations = [];\n    // One by one move boundary of unsorted subarray\n\n    for (i = 0; i < array.length - 1; i++) {\n        // Find the minimum element in unsorted array\n        min_idx = i;\n        animations.push([\"check\", i, min_idx]);\n        for (j = i + 1; j < array.length; j++) {\n            if (array[j].props.value < array[min_idx].props.value) {\n                animations.push([\"uncheck-check\", min_idx, j]);\n                min_idx = j;\n            } else if ((j + 1) === array.length) {\n                animations.push([\"uncheck-check\", j, min_idx]);\n            } else {\n                animations.push([\"uncheck-check\", j, j+1]);\n            }\n        }\n        // Swap the found minimum element with the first element\n        animations.push([\"swap\", min_idx, i]);\n        swap(array,min_idx, i);\n        animations.push([\"correct\", i, i]);\n    }\n    return animations;\n}\n\nexport default selectionSort;","/*\nEnumerated type for the visualization types\n*/\nexport const visualizationTypes = {\n    BAR_HEIGHT: 'height',\n    COLOR: 'color',\n}","/*\nEnumerated type for the sorting algorithms\n*/\nexport const sortingAlgorithms = {\n    BUBBLE_SORT: 'bubble',\n    QUICK_SORT_HOARE: 'quick-hoare',\n    QUICK_SORT_LOMUNTO: 'quick-lomuto',\n    MERGE_SORT: 'merge',\n    SELECTION_SORT: 'selection',\n}","import React from 'react';\nimport './header.css'\n\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from '@mui/material/MenuItem';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { visualizationTypes } from '../../enums/visualizationTypes';\nimport { sortingAlgorithms } from '../../enums/sortingAlgorithms';\n\n/*\nStyles for visualization type and sorting algorithm drop down\n*/ \nconst styles = makeStyles({\n    root: {\n        width: 200,\n        \"& .MuiOutlinedInput-input\": {\n          color: \"white\"\n        },\n        \"& .MuiInputLabel-root\": {\n          color: \"white\"\n        },\n        \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n          borderColor: \"white\"\n        },\n        \"&:hover .MuiOutlinedInput-input\": {\n          color: \"white\"\n        },\n        \"&:hover .MuiInputLabel-root\": {\n          color: \"white\"\n        },\n        \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n          borderColor: \"white\"\n        },\n        \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\n          color: \"white\"\n        },\n        \"& .MuiInputLabel-root.Mui-focused\": {\n          color: \"white\"\n        },\n        \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n          borderColor: \"white\"\n        }\n    },\n    icon: {\n      color: \"white\"\n    }\n  });\n\nfunction Header(props) {\n    const classes = styles();\n    return(\n        <header className=\"App-header\">\n            <div className=\"header-button\">\n            </div>\n            <div className=\"header-title\">\n                Sorting Visualizer\n            </div>\n            <TextField\n            value={props.visualizationType}\n            onChange={props.updateSelectedVisualizationType}\n            label=\"Visualization Type\"\n            className={classes.root}\n            variant=\"outlined\"\n            select\n            SelectProps={{classes: {icon: classes.icon}}}\n            >\n                <MenuItem value={visualizationTypes.BAR_HEIGHT}>Bar Height</MenuItem>\n                <MenuItem value={visualizationTypes.COLOR}>Color</MenuItem>\n            </TextField>\n\n            <TextField\n            value={props.algorithm}\n            onChange={props.updateSelectedAlgorithm}\n            label=\"Sorting Algorithm\"\n            className={classes.root}\n            variant=\"outlined\"\n            select\n            style={{width: 225}}\n            SelectProps={{classes: {icon: classes.icon}}}\n            >\n                <MenuItem value={sortingAlgorithms.BUBBLE_SORT}>Bubble Sort</MenuItem>\n                <MenuItem value={sortingAlgorithms.SELECTION_SORT}>Selection Sort</MenuItem>\n                <MenuItem value={sortingAlgorithms.QUICK_SORT_HOARE}>Quick Sort (Hoare)</MenuItem>\n                <MenuItem value={sortingAlgorithms.QUICK_SORT_LOMUNTO}>Quick Sort (Lomunto)</MenuItem>\n                <MenuItem value={sortingAlgorithms.MERGE_SORT}>Merge Sort</MenuItem>\n\n            </TextField>\n\n            <div className=\"header-button\"> \n                <button className=\"sort-button\" onClick={props.sortElements}> Sort! </button>\n            </div>\n\n            <div className=\"header-button\">\n                <button className=\"sort-button\" onClick={props.generateNewArray}> Generate New Array </button>\n            </div>\n\n            <div className=\"header-button\">\n            </div>\n        </header>\n\n );\n\n}\n\nexport default Header;","import './SortingVisualizer.css';\n\nimport React from 'react';\nimport GridElement from '../grid_element/GridElement';\n\nimport bubbleSort from '../../sorting_algorithms/bubbleSort';\nimport quickSortHoare from '../../sorting_algorithms/quickSortHoare';\nimport quickSortLomunto from '../../sorting_algorithms/quickSortLomunto';\nimport mergeSort from '../../sorting_algorithms/mergeSort';\nimport selectionSort from '../../sorting_algorithms/selectionSort';\n\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\nimport { visualizationTypes } from '../../enums/visualizationTypes';\nimport { sortingAlgorithms } from '../../enums/sortingAlgorithms';\n\nimport Header from '../header/header'\n\n\nconst NUM_BARS = 90; // Nubmer of desired elements to sort\nconst HEADER_DIFFERENCE = 145; // Difference used to correctly size the sorting visualizer\nconst SORTING_SPEED_IN_MS = 30; // Time between each animations\nconst VISUALIZE_COMPARISONS = true; // Boolean to color the bars being compared / swapped and the pivots\n\nclass SortingVisualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            algorithm: sortingAlgorithms.BUBBLE_SORT,\n            visualizationType: visualizationTypes.BAR_HEIGHT,\n            windowHeight: window.innerHeight,\n            loadingBarProgress: 0,\n            isSorting: false,\n        }\n\n        this.generateNewArray = this.generateNewArray.bind(this);\n        this.sortElements = this.sortElements.bind(this);\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\n        this.updateSelectedVisualizationType = this.updateSelectedVisualizationType.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n    \n    componentDidMount() {\n        this.generateNewArray();\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    handleResize(e) {\n        if (this.state.isSorting) {\n            return;\n        }\n\n        this.setState({windowHeight: window.innerHeight});\n        this.generateNewArray();\n    }\n    \n    updateStateAfterSorting(ms) {\n        setTimeout(() => {this.setState({isSorting: false})}, ms);\n    }\n\n    /*\n    Method used to update the state based on the sorting algorithm dropdown\n    */\n    updateSelectedAlgorithm(e) {\n        this.setState({algorithm: e.target.value});\n    };\n\n    /*\n    Method used to update the state based on the visualization type\n    */\n    updateSelectedVisualizationType(e) {\n        this.setState({visualizationType: e.target.value}, () => {this.generateNewArray();});\n    };\n\n    /*\n    Method to generate a random integer that is used for the heights of the bars\n    */\n    getRandomInt() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        const min = 30;\n        const max = maxBarHeight;\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /*\n    Method used to generate an array of elements with random heights\n    */\n    generateHeightArray() {\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var height = this.getRandomInt();\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={height} element_height={height} color={\"#282c34\"}/>);\n        }\n        this.setState({array: new_array});\n    }\n\n    /*\n    Method used to shuffle the sorted list of colored elements\n    */\n    shuffle(array) {\n        let currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex !== 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n      \n        return array;\n    }\n\n    /*\n    Method to generate an array of colored elements using the HSL color scheme\n    */\n    generateColoredArray() {\n        const windowHeight = this.state.windowHeight\n        const maxBarHeight = windowHeight - HEADER_DIFFERENCE;\n        var new_array = [];\n        for (var i = 0; i < NUM_BARS; i++) {\n            var value = i * 3;\n            var hsl_string = \"hsl(\"+value+\",60%,70%)\";\n            new_array.push(<GridElement className=\"grid-element\" key={i} value={value} element_height={maxBarHeight} color={hsl_string} />);\n        }\n        new_array = this.shuffle(new_array); \n        this.setState({array: new_array});\n    }\n\n    /*\n    Method to generate a new array based on the visualization type\n    */\n    generateNewArray() {\n        if (this.state.isSorting) {\n            return;\n        }\n\n        this.setState({loadingBarProgress: 0});\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.generateHeightArray();\n        } else if (this.state.visualizationType === visualizationTypes.COLOR) {\n            this.generateColoredArray();\n        }\n    }\n\n    /*\n    Method to remove all of the non swap visualizations\n    */\n    visualizeSwapOnly(animations) {\n        var swapAnimations = [];\n\n        for (let i = 0; i < animations.length; i++) {\n            if (animations[i][0] === \"swap\") {\n                swapAnimations.push(animations[i]);\n            }\n        }\n        return swapAnimations;\n    }\n\n    /*\n    Method used to visualize sorting algorithm with bar height\n    */\n    barHeightVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n\n                if (animation_type === \"check\") { \n                    gridElements[barOneIdx].style.backgroundColor = \"cyan\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"swap\") {\n                    var temp = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                    gridElements[barTwoIdx].style.backgroundColor = \"cyan\";\n                } else if (animation_type === \"pivot-select\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"red\";\n                } else if (animation_type === \"pivot-deselect\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                } else if (animation_type === \"correct\") {\n                    gridElements[barOneIdx].style.backgroundColor = \"#282c34\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i) / animations.length) * 100) + 1;\n                this.setState({loadingBarProgress: progress});\n\n            }, i * SORTING_SPEED_IN_MS);\n        }\n    }\n\n    /*\n    Method used to visualize sorting algorithm with color\n    */\n    colorVisualization(animations) {\n        var temp_array = this.state.array.slice();\n        for (let i = 0; i < animations.length; i++) {\n            const gridElements = document.getElementsByClassName('grid-element');\n            setTimeout(() => {\n                const [animation_type, barOneIdx, barTwoIdx] = animations[i];\n                if (animation_type === \"check\") {\n                    gridElements[barOneIdx].style.border = \"black 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                } else if (animation_type === \"uncheck\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"white 1px solid\";\n                } else if (animation_type === \"swap\") {\n                    var temp_two = temp_array[barOneIdx]\n                    temp_array[barOneIdx] = temp_array[barTwoIdx];\n                    temp_array[barTwoIdx] = temp_two;\n                } else if (animation_type === \"shift\") {\n                    const movedElement = temp_array.splice(barTwoIdx, 1);\n                    temp_array.splice(barOneIdx, 0, movedElement[0]);\n                } else if (animation_type === \"uncheck-check\") {\n                    gridElements[barOneIdx].style.border = \"white 1px solid\";\n                    gridElements[barTwoIdx].style.border = \"black 1px solid\";\n                }\n                this.setState({array: temp_array});\n                var progress = Math.floor(((i + 1) / animations.length) * 100);\n                this.setState({loadingBarProgress: progress});\n            }, i * SORTING_SPEED_IN_MS);\n        }\n    }\n\n    /*\n    Method to visualize the sorting process of the selected algorithm using the selected visualization\n    */\n    sortElements() {\n        if (this.state.isSorting) {\n            return;\n        }\n\n        this.setState({isSorting: true});\n\n        var animations = [];\n        if (this.state.algorithm === sortingAlgorithms.BUBBLE_SORT) {\n            animations = bubbleSort(this.state.array.slice());\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_HOARE) {\n            // eslint-disable-next-line\n            [_, animations] = quickSortHoare(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.QUICK_SORT_LOMUNTO) {\n            // eslint-disable-next-line\n            [_, animations] = quickSortLomunto(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.MERGE_SORT) {\n            animations = mergeSort(this.state.array.slice(), 0, this.state.array.length-1);\n        } else if (this.state.algorithm === sortingAlgorithms.SELECTION_SORT) {\n            animations = selectionSort(this.state.array.slice());\n        }\n\n        if (!VISUALIZE_COMPARISONS) {\n            animations = this.visualizeSwapOnly(animations);\n        }\n\n        if (this.state.visualizationType === visualizationTypes.BAR_HEIGHT) {\n            this.barHeightVisualization(animations);\n        } else if (this.state.visualizationType === visualizationTypes.COLOR){\n            this.colorVisualization(animations);\n        }\n        this.updateStateAfterSorting(SORTING_SPEED_IN_MS * animations.length);\n    }\n\n    render () {\n        const windowHeight = this.state.windowHeight\n        const visualizerHeight = windowHeight - HEADER_DIFFERENCE;\n        return (\n            <div className=\"sorting-visualizer\">\n                <Header \n                    algorithm={this.state.algorithm}\n                    visualizationType={this.state.visualizationType}\n                    generateNewArray={this.generateNewArray}\n                    sortElements={this.sortElements}\n                    updateSelectedAlgorithm={this.updateSelectedAlgorithm}\n                    updateSelectedVisualizationType={this.updateSelectedVisualizationType}\n                />\n                <ProgressBar completed={this.state.loadingBarProgress} borderRadius=\"0px\" customLabel=\" \" height=\"5px\" bgColor=\"red\" baseBgColor=\"white\"/>\n                <div className=\"sorting-grid\" style={{height: visualizerHeight}}>\n                    {this.state.array}\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from '../sorting_visualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <SortingVisualizer/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/app/index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './components/app/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}